<?php
/**
 * CompanyFullAllOfDataCompanyInformation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CompanyFullAllOfDataCompanyInformation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyFullAllOfDataCompanyInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyFull_allOf_data_company_information';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'trade_name' => 'string',
        'company_number' => 'string',
        'legal_form' => '\OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationLegalForm',
        'vat_number' => 'string',
        'activities' => '\OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationActivities[]',
        'founded_on' => '\DateTime',
        'ceased_on' => '\DateTime',
        'active' => 'bool',
        'commercial_registration' => '\OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationCommercialRegistration',
        'has_workforce' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'trade_name' => null,
        'company_number' => null,
        'legal_form' => null,
        'vat_number' => null,
        'activities' => null,
        'founded_on' => 'date',
        'ceased_on' => 'date',
        'active' => null,
        'commercial_registration' => null,
        'has_workforce' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'trade_name' => true,
        'company_number' => true,
        'legal_form' => false,
        'vat_number' => true,
        'activities' => false,
        'founded_on' => true,
        'ceased_on' => true,
        'active' => true,
        'commercial_registration' => false,
        'has_workforce' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'trade_name' => 'trade_name',
        'company_number' => 'company_number',
        'legal_form' => 'legal_form',
        'vat_number' => 'vat_number',
        'activities' => 'activities',
        'founded_on' => 'founded_on',
        'ceased_on' => 'ceased_on',
        'active' => 'active',
        'commercial_registration' => 'commercial_registration',
        'has_workforce' => 'has_workforce'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'trade_name' => 'setTradeName',
        'company_number' => 'setCompanyNumber',
        'legal_form' => 'setLegalForm',
        'vat_number' => 'setVatNumber',
        'activities' => 'setActivities',
        'founded_on' => 'setFoundedOn',
        'ceased_on' => 'setCeasedOn',
        'active' => 'setActive',
        'commercial_registration' => 'setCommercialRegistration',
        'has_workforce' => 'setHasWorkforce'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'trade_name' => 'getTradeName',
        'company_number' => 'getCompanyNumber',
        'legal_form' => 'getLegalForm',
        'vat_number' => 'getVatNumber',
        'activities' => 'getActivities',
        'founded_on' => 'getFoundedOn',
        'ceased_on' => 'getCeasedOn',
        'active' => 'getActive',
        'commercial_registration' => 'getCommercialRegistration',
        'has_workforce' => 'getHasWorkforce'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('trade_name', $data ?? [], null);
        $this->setIfExists('company_number', $data ?? [], null);
        $this->setIfExists('legal_form', $data ?? [], null);
        $this->setIfExists('vat_number', $data ?? [], null);
        $this->setIfExists('activities', $data ?? [], null);
        $this->setIfExists('founded_on', $data ?? [], null);
        $this->setIfExists('ceased_on', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('commercial_registration', $data ?? [], null);
        $this->setIfExists('has_workforce', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Denomination of the company.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets trade_name
     *
     * @return string|null
     */
    public function getTradeName()
    {
        return $this->container['trade_name'];
    }

    /**
     * Sets trade_name
     *
     * @param string|null $trade_name Trade name of the company.
     *
     * @return self
     */
    public function setTradeName($trade_name)
    {
        if (is_null($trade_name)) {
            array_push($this->openAPINullablesSetToNull, 'trade_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_name'] = $trade_name;

        return $this;
    }

    /**
     * Gets company_number
     *
     * @return string|null
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param string|null $company_number The number of the company entity.
     *
     * @return self
     */
    public function setCompanyNumber($company_number)
    {
        if (is_null($company_number)) {
            array_push($this->openAPINullablesSetToNull, 'company_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets legal_form
     *
     * @return \OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationLegalForm|null
     */
    public function getLegalForm()
    {
        return $this->container['legal_form'];
    }

    /**
     * Sets legal_form
     *
     * @param \OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationLegalForm|null $legal_form legal_form
     *
     * @return self
     */
    public function setLegalForm($legal_form)
    {
        if (is_null($legal_form)) {
            throw new \InvalidArgumentException('non-nullable legal_form cannot be null');
        }
        $this->container['legal_form'] = $legal_form;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string|null
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string|null $vat_number Tax number of the company.
     *
     * @return self
     */
    public function setVatNumber($vat_number)
    {
        if (is_null($vat_number)) {
            array_push($this->openAPINullablesSetToNull, 'vat_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return \OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationActivities[]|null
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param \OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationActivities[]|null $activities activities
     *
     * @return self
     */
    public function setActivities($activities)
    {
        if (is_null($activities)) {
            throw new \InvalidArgumentException('non-nullable activities cannot be null');
        }
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets founded_on
     *
     * @return \DateTime|null
     */
    public function getFoundedOn()
    {
        return $this->container['founded_on'];
    }

    /**
     * Sets founded_on
     *
     * @param \DateTime|null $founded_on Company's creation date.
     *
     * @return self
     */
    public function setFoundedOn($founded_on)
    {
        if (is_null($founded_on)) {
            array_push($this->openAPINullablesSetToNull, 'founded_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('founded_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['founded_on'] = $founded_on;

        return $this;
    }

    /**
     * Gets ceased_on
     *
     * @return \DateTime|null
     */
    public function getCeasedOn()
    {
        return $this->container['ceased_on'];
    }

    /**
     * Sets ceased_on
     *
     * @param \DateTime|null $ceased_on Indicates the company's cessation date if company is inactive, otherwise null.
     *
     * @return self
     */
    public function setCeasedOn($ceased_on)
    {
        if (is_null($ceased_on)) {
            array_push($this->openAPINullablesSetToNull, 'ceased_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ceased_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ceased_on'] = $ceased_on;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Indicates whether or not the company is still active.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            array_push($this->openAPINullablesSetToNull, 'active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets commercial_registration
     *
     * @return \OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationCommercialRegistration|null
     */
    public function getCommercialRegistration()
    {
        return $this->container['commercial_registration'];
    }

    /**
     * Sets commercial_registration
     *
     * @param \OpenAPI\Client\Model\CompanyFullAllOfDataCompanyInformationCommercialRegistration|null $commercial_registration commercial_registration
     *
     * @return self
     */
    public function setCommercialRegistration($commercial_registration)
    {
        if (is_null($commercial_registration)) {
            throw new \InvalidArgumentException('non-nullable commercial_registration cannot be null');
        }
        $this->container['commercial_registration'] = $commercial_registration;

        return $this;
    }

    /**
     * Gets has_workforce
     *
     * @return bool|null
     */
    public function getHasWorkforce()
    {
        return $this->container['has_workforce'];
    }

    /**
     * Sets has_workforce
     *
     * @param bool|null $has_workforce True if the company has at least one employee.
     *
     * @return self
     */
    public function setHasWorkforce($has_workforce)
    {
        if (is_null($has_workforce)) {
            array_push($this->openAPINullablesSetToNull, 'has_workforce');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_workforce', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_workforce'] = $has_workforce;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


