<?php
/**
 * CreateWebhookSubscription
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateWebhookSubscription Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateWebhookSubscription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateWebhookSubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'endpoint' => 'string',
        'description' => 'string',
        'sandbox' => 'bool',
        'subscribed_events' => '\OpenAPI\Client\Model\CreateWebhookSubscriptionSubscribedEvents',
        'secret_key' => 'string',
        'scopes' => '\OpenAPI\Client\Model\CreateWebhookSubscriptionScopes',
        'workspaces' => '\OpenAPI\Client\Model\CreateWebhookSubscriptionWorkspaces',
        'auto_retry' => 'bool',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'endpoint' => 'uri',
        'description' => null,
        'sandbox' => null,
        'subscribed_events' => null,
        'secret_key' => null,
        'scopes' => null,
        'workspaces' => null,
        'auto_retry' => null,
        'enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'endpoint' => false,
        'description' => true,
        'sandbox' => false,
        'subscribed_events' => false,
        'secret_key' => true,
        'scopes' => false,
        'workspaces' => false,
        'auto_retry' => false,
        'enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpoint' => 'endpoint',
        'description' => 'description',
        'sandbox' => 'sandbox',
        'subscribed_events' => 'subscribed_events',
        'secret_key' => 'secret_key',
        'scopes' => 'scopes',
        'workspaces' => 'workspaces',
        'auto_retry' => 'auto_retry',
        'enabled' => 'enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpoint' => 'setEndpoint',
        'description' => 'setDescription',
        'sandbox' => 'setSandbox',
        'subscribed_events' => 'setSubscribedEvents',
        'secret_key' => 'setSecretKey',
        'scopes' => 'setScopes',
        'workspaces' => 'setWorkspaces',
        'auto_retry' => 'setAutoRetry',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpoint' => 'getEndpoint',
        'description' => 'getDescription',
        'sandbox' => 'getSandbox',
        'subscribed_events' => 'getSubscribedEvents',
        'secret_key' => 'getSecretKey',
        'scopes' => 'getScopes',
        'workspaces' => 'getWorkspaces',
        'auto_retry' => 'getAutoRetry',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('endpoint', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('sandbox', $data ?? [], null);
        $this->setIfExists('subscribed_events', $data ?? [], null);
        $this->setIfExists('secret_key', $data ?? [], null);
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('workspaces', $data ?? [], null);
        $this->setIfExists('auto_retry', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['endpoint'] === null) {
            $invalidProperties[] = "'endpoint' can't be null";
        }
        if ((mb_strlen($this->container['endpoint']) > 255)) {
            $invalidProperties[] = "invalid value for 'endpoint', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 128)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['sandbox'] === null) {
            $invalidProperties[] = "'sandbox' can't be null";
        }
        if ($this->container['subscribed_events'] === null) {
            $invalidProperties[] = "'subscribed_events' can't be null";
        }
        if (!is_null($this->container['secret_key']) && (mb_strlen($this->container['secret_key']) > 32)) {
            $invalidProperties[] = "invalid value for 'secret_key', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['secret_key']) && (mb_strlen($this->container['secret_key']) < 32)) {
            $invalidProperties[] = "invalid value for 'secret_key', the character length must be bigger than or equal to 32.";
        }

        if ($this->container['scopes'] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if ($this->container['auto_retry'] === null) {
            $invalidProperties[] = "'auto_retry' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpoint
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string $endpoint Https target URL of the webhook
     *
     * @return self
     */
    public function setEndpoint($endpoint)
    {
        if (is_null($endpoint)) {
            throw new \InvalidArgumentException('non-nullable endpoint cannot be null');
        }
        if ((mb_strlen($endpoint) > 255)) {
            throw new \InvalidArgumentException('invalid length for $endpoint when calling CreateWebhookSubscription., must be smaller than or equal to 255.');
        }

        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Short description of the webhook. This property cannot start or end with whitespace, does not allow HTML tags, URL or email.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 128)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CreateWebhookSubscription., must be smaller than or equal to 128.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sandbox
     *
     * @return bool
     */
    public function getSandbox()
    {
        return $this->container['sandbox'];
    }

    /**
     * Sets sandbox
     *
     * @param bool $sandbox sandbox
     *
     * @return self
     */
    public function setSandbox($sandbox)
    {
        if (is_null($sandbox)) {
            throw new \InvalidArgumentException('non-nullable sandbox cannot be null');
        }
        $this->container['sandbox'] = $sandbox;

        return $this;
    }

    /**
     * Gets subscribed_events
     *
     * @return \OpenAPI\Client\Model\CreateWebhookSubscriptionSubscribedEvents
     */
    public function getSubscribedEvents()
    {
        return $this->container['subscribed_events'];
    }

    /**
     * Sets subscribed_events
     *
     * @param \OpenAPI\Client\Model\CreateWebhookSubscriptionSubscribedEvents $subscribed_events subscribed_events
     *
     * @return self
     */
    public function setSubscribedEvents($subscribed_events)
    {
        if (is_null($subscribed_events)) {
            throw new \InvalidArgumentException('non-nullable subscribed_events cannot be null');
        }
        $this->container['subscribed_events'] = $subscribed_events;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string|null
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string|null $secret_key Autogenerated 32 bytes key
     *
     * @return self
     */
    public function setSecretKey($secret_key)
    {
        if (is_null($secret_key)) {
            array_push($this->openAPINullablesSetToNull, 'secret_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secret_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($secret_key) && (mb_strlen($secret_key) > 32)) {
            throw new \InvalidArgumentException('invalid length for $secret_key when calling CreateWebhookSubscription., must be smaller than or equal to 32.');
        }
        if (!is_null($secret_key) && (mb_strlen($secret_key) < 32)) {
            throw new \InvalidArgumentException('invalid length for $secret_key when calling CreateWebhookSubscription., must be bigger than or equal to 32.');
        }

        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return \OpenAPI\Client\Model\CreateWebhookSubscriptionScopes
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param \OpenAPI\Client\Model\CreateWebhookSubscriptionScopes $scopes scopes
     *
     * @return self
     */
    public function setScopes($scopes)
    {
        if (is_null($scopes)) {
            throw new \InvalidArgumentException('non-nullable scopes cannot be null');
        }
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets workspaces
     *
     * @return \OpenAPI\Client\Model\CreateWebhookSubscriptionWorkspaces|null
     */
    public function getWorkspaces()
    {
        return $this->container['workspaces'];
    }

    /**
     * Sets workspaces
     *
     * @param \OpenAPI\Client\Model\CreateWebhookSubscriptionWorkspaces|null $workspaces workspaces
     *
     * @return self
     */
    public function setWorkspaces($workspaces)
    {
        if (is_null($workspaces)) {
            throw new \InvalidArgumentException('non-nullable workspaces cannot be null');
        }
        $this->container['workspaces'] = $workspaces;

        return $this;
    }

    /**
     * Gets auto_retry
     *
     * @return bool
     */
    public function getAutoRetry()
    {
        return $this->container['auto_retry'];
    }

    /**
     * Sets auto_retry
     *
     * @param bool $auto_retry If a Webhook request fails for any reason, Yousign will retry the request 8 times using a back-off mechanism after: 2, 6, 30, 60, 300, 1080, 1440, 2880 min
     *
     * @return self
     */
    public function setAutoRetry($auto_retry)
    {
        if (is_null($auto_retry)) {
            throw new \InvalidArgumentException('non-nullable auto_retry cannot be null');
        }
        $this->container['auto_retry'] = $auto_retry;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Choose whether the webhook is enabled or not.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


