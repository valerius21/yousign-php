<?php
/**
 * UpdateCustomExperience
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateCustomExperience Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateCustomExperience implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateCustomExperience';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'landing_page_disabled' => 'bool',
        'side_panel_disabled' => 'bool',
        'background_color' => 'string',
        'button_color' => 'string',
        'text_color' => 'string',
        'text_button_color' => 'string',
        'disabled_notifications' => '\OpenAPI\Client\Model\CustomExperienceDisabledNotificationsType[]',
        'email_logo_disabled' => 'bool',
        'email_header_text_disabled' => 'bool',
        'email_footer_signature_disabled' => 'bool',
        'email_expiration_text_disabled' => 'bool',
        'recipients_activity_disabled' => 'bool',
        'download_documents_disabled' => 'bool',
        'redirect_urls' => '\OpenAPI\Client\Model\UpdateCustomExperienceRedirectUrls',
        'logo_layout' => '\OpenAPI\Client\Model\LogoLayout'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'landing_page_disabled' => null,
        'side_panel_disabled' => null,
        'background_color' => null,
        'button_color' => null,
        'text_color' => null,
        'text_button_color' => null,
        'disabled_notifications' => null,
        'email_logo_disabled' => null,
        'email_header_text_disabled' => null,
        'email_footer_signature_disabled' => null,
        'email_expiration_text_disabled' => null,
        'recipients_activity_disabled' => null,
        'download_documents_disabled' => null,
        'redirect_urls' => null,
        'logo_layout' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'landing_page_disabled' => true,
        'side_panel_disabled' => true,
        'background_color' => true,
        'button_color' => true,
        'text_color' => true,
        'text_button_color' => true,
        'disabled_notifications' => true,
        'email_logo_disabled' => true,
        'email_header_text_disabled' => true,
        'email_footer_signature_disabled' => true,
        'email_expiration_text_disabled' => true,
        'recipients_activity_disabled' => true,
        'download_documents_disabled' => true,
        'redirect_urls' => true,
        'logo_layout' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'landing_page_disabled' => 'landing_page_disabled',
        'side_panel_disabled' => 'side_panel_disabled',
        'background_color' => 'background_color',
        'button_color' => 'button_color',
        'text_color' => 'text_color',
        'text_button_color' => 'text_button_color',
        'disabled_notifications' => 'disabled_notifications',
        'email_logo_disabled' => 'email_logo_disabled',
        'email_header_text_disabled' => 'email_header_text_disabled',
        'email_footer_signature_disabled' => 'email_footer_signature_disabled',
        'email_expiration_text_disabled' => 'email_expiration_text_disabled',
        'recipients_activity_disabled' => 'recipients_activity_disabled',
        'download_documents_disabled' => 'download_documents_disabled',
        'redirect_urls' => 'redirect_urls',
        'logo_layout' => 'logo_layout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'landing_page_disabled' => 'setLandingPageDisabled',
        'side_panel_disabled' => 'setSidePanelDisabled',
        'background_color' => 'setBackgroundColor',
        'button_color' => 'setButtonColor',
        'text_color' => 'setTextColor',
        'text_button_color' => 'setTextButtonColor',
        'disabled_notifications' => 'setDisabledNotifications',
        'email_logo_disabled' => 'setEmailLogoDisabled',
        'email_header_text_disabled' => 'setEmailHeaderTextDisabled',
        'email_footer_signature_disabled' => 'setEmailFooterSignatureDisabled',
        'email_expiration_text_disabled' => 'setEmailExpirationTextDisabled',
        'recipients_activity_disabled' => 'setRecipientsActivityDisabled',
        'download_documents_disabled' => 'setDownloadDocumentsDisabled',
        'redirect_urls' => 'setRedirectUrls',
        'logo_layout' => 'setLogoLayout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'landing_page_disabled' => 'getLandingPageDisabled',
        'side_panel_disabled' => 'getSidePanelDisabled',
        'background_color' => 'getBackgroundColor',
        'button_color' => 'getButtonColor',
        'text_color' => 'getTextColor',
        'text_button_color' => 'getTextButtonColor',
        'disabled_notifications' => 'getDisabledNotifications',
        'email_logo_disabled' => 'getEmailLogoDisabled',
        'email_header_text_disabled' => 'getEmailHeaderTextDisabled',
        'email_footer_signature_disabled' => 'getEmailFooterSignatureDisabled',
        'email_expiration_text_disabled' => 'getEmailExpirationTextDisabled',
        'recipients_activity_disabled' => 'getRecipientsActivityDisabled',
        'download_documents_disabled' => 'getDownloadDocumentsDisabled',
        'redirect_urls' => 'getRedirectUrls',
        'logo_layout' => 'getLogoLayout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('landing_page_disabled', $data ?? [], null);
        $this->setIfExists('side_panel_disabled', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('button_color', $data ?? [], null);
        $this->setIfExists('text_color', $data ?? [], null);
        $this->setIfExists('text_button_color', $data ?? [], null);
        $this->setIfExists('disabled_notifications', $data ?? [], null);
        $this->setIfExists('email_logo_disabled', $data ?? [], null);
        $this->setIfExists('email_header_text_disabled', $data ?? [], null);
        $this->setIfExists('email_footer_signature_disabled', $data ?? [], null);
        $this->setIfExists('email_expiration_text_disabled', $data ?? [], null);
        $this->setIfExists('recipients_activity_disabled', $data ?? [], null);
        $this->setIfExists('download_documents_disabled', $data ?? [], null);
        $this->setIfExists('redirect_urls', $data ?? [], null);
        $this->setIfExists('logo_layout', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['background_color']) && !preg_match("/^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/", $this->container['background_color'])) {
            $invalidProperties[] = "invalid value for 'background_color', must be conform to the pattern /^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/.";
        }

        if (!is_null($this->container['button_color']) && !preg_match("/^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/", $this->container['button_color'])) {
            $invalidProperties[] = "invalid value for 'button_color', must be conform to the pattern /^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/.";
        }

        if (!is_null($this->container['text_color']) && !preg_match("/^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/", $this->container['text_color'])) {
            $invalidProperties[] = "invalid value for 'text_color', must be conform to the pattern /^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/.";
        }

        if (!is_null($this->container['text_button_color']) && !preg_match("/^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/", $this->container['text_button_color'])) {
            $invalidProperties[] = "invalid value for 'text_button_color', must be conform to the pattern /^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets landing_page_disabled
     *
     * @return bool|null
     */
    public function getLandingPageDisabled()
    {
        return $this->container['landing_page_disabled'];
    }

    /**
     * Sets landing_page_disabled
     *
     * @param bool|null $landing_page_disabled landing_page_disabled
     *
     * @return self
     */
    public function setLandingPageDisabled($landing_page_disabled)
    {
        if (is_null($landing_page_disabled)) {
            array_push($this->openAPINullablesSetToNull, 'landing_page_disabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('landing_page_disabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['landing_page_disabled'] = $landing_page_disabled;

        return $this;
    }

    /**
     * Gets side_panel_disabled
     *
     * @return bool|null
     */
    public function getSidePanelDisabled()
    {
        return $this->container['side_panel_disabled'];
    }

    /**
     * Sets side_panel_disabled
     *
     * @param bool|null $side_panel_disabled side_panel_disabled
     *
     * @return self
     */
    public function setSidePanelDisabled($side_panel_disabled)
    {
        if (is_null($side_panel_disabled)) {
            array_push($this->openAPINullablesSetToNull, 'side_panel_disabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('side_panel_disabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['side_panel_disabled'] = $side_panel_disabled;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color Hexadecimal color value
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            array_push($this->openAPINullablesSetToNull, 'background_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($background_color) && (!preg_match("/^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/", ObjectSerializer::toString($background_color)))) {
            throw new \InvalidArgumentException("invalid value for \$background_color when calling UpdateCustomExperience., must conform to the pattern /^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/.");
        }

        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets button_color
     *
     * @return string|null
     */
    public function getButtonColor()
    {
        return $this->container['button_color'];
    }

    /**
     * Sets button_color
     *
     * @param string|null $button_color Hexadecimal color value
     *
     * @return self
     */
    public function setButtonColor($button_color)
    {
        if (is_null($button_color)) {
            array_push($this->openAPINullablesSetToNull, 'button_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($button_color) && (!preg_match("/^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/", ObjectSerializer::toString($button_color)))) {
            throw new \InvalidArgumentException("invalid value for \$button_color when calling UpdateCustomExperience., must conform to the pattern /^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/.");
        }

        $this->container['button_color'] = $button_color;

        return $this;
    }

    /**
     * Gets text_color
     *
     * @return string|null
     */
    public function getTextColor()
    {
        return $this->container['text_color'];
    }

    /**
     * Sets text_color
     *
     * @param string|null $text_color Hexadecimal color value
     *
     * @return self
     */
    public function setTextColor($text_color)
    {
        if (is_null($text_color)) {
            array_push($this->openAPINullablesSetToNull, 'text_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($text_color) && (!preg_match("/^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/", ObjectSerializer::toString($text_color)))) {
            throw new \InvalidArgumentException("invalid value for \$text_color when calling UpdateCustomExperience., must conform to the pattern /^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/.");
        }

        $this->container['text_color'] = $text_color;

        return $this;
    }

    /**
     * Gets text_button_color
     *
     * @return string|null
     */
    public function getTextButtonColor()
    {
        return $this->container['text_button_color'];
    }

    /**
     * Sets text_button_color
     *
     * @param string|null $text_button_color Hexadecimal color value
     *
     * @return self
     */
    public function setTextButtonColor($text_button_color)
    {
        if (is_null($text_button_color)) {
            array_push($this->openAPINullablesSetToNull, 'text_button_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text_button_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($text_button_color) && (!preg_match("/^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/", ObjectSerializer::toString($text_button_color)))) {
            throw new \InvalidArgumentException("invalid value for \$text_button_color when calling UpdateCustomExperience., must conform to the pattern /^(#[a-f0-9]{3}$)|(#[a-f0-9]{6}$)/.");
        }

        $this->container['text_button_color'] = $text_button_color;

        return $this;
    }

    /**
     * Gets disabled_notifications
     *
     * @return \OpenAPI\Client\Model\CustomExperienceDisabledNotificationsType[]|null
     */
    public function getDisabledNotifications()
    {
        return $this->container['disabled_notifications'];
    }

    /**
     * Sets disabled_notifications
     *
     * @param \OpenAPI\Client\Model\CustomExperienceDisabledNotificationsType[]|null $disabled_notifications disabled_notifications
     *
     * @return self
     */
    public function setDisabledNotifications($disabled_notifications)
    {
        if (is_null($disabled_notifications)) {
            array_push($this->openAPINullablesSetToNull, 'disabled_notifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disabled_notifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disabled_notifications'] = $disabled_notifications;

        return $this;
    }

    /**
     * Gets email_logo_disabled
     *
     * @return bool|null
     */
    public function getEmailLogoDisabled()
    {
        return $this->container['email_logo_disabled'];
    }

    /**
     * Sets email_logo_disabled
     *
     * @param bool|null $email_logo_disabled email_logo_disabled
     *
     * @return self
     */
    public function setEmailLogoDisabled($email_logo_disabled)
    {
        if (is_null($email_logo_disabled)) {
            array_push($this->openAPINullablesSetToNull, 'email_logo_disabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_logo_disabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_logo_disabled'] = $email_logo_disabled;

        return $this;
    }

    /**
     * Gets email_header_text_disabled
     *
     * @return bool|null
     */
    public function getEmailHeaderTextDisabled()
    {
        return $this->container['email_header_text_disabled'];
    }

    /**
     * Sets email_header_text_disabled
     *
     * @param bool|null $email_header_text_disabled email_header_text_disabled
     *
     * @return self
     */
    public function setEmailHeaderTextDisabled($email_header_text_disabled)
    {
        if (is_null($email_header_text_disabled)) {
            array_push($this->openAPINullablesSetToNull, 'email_header_text_disabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_header_text_disabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_header_text_disabled'] = $email_header_text_disabled;

        return $this;
    }

    /**
     * Gets email_footer_signature_disabled
     *
     * @return bool|null
     */
    public function getEmailFooterSignatureDisabled()
    {
        return $this->container['email_footer_signature_disabled'];
    }

    /**
     * Sets email_footer_signature_disabled
     *
     * @param bool|null $email_footer_signature_disabled email_footer_signature_disabled
     *
     * @return self
     */
    public function setEmailFooterSignatureDisabled($email_footer_signature_disabled)
    {
        if (is_null($email_footer_signature_disabled)) {
            array_push($this->openAPINullablesSetToNull, 'email_footer_signature_disabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_footer_signature_disabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_footer_signature_disabled'] = $email_footer_signature_disabled;

        return $this;
    }

    /**
     * Gets email_expiration_text_disabled
     *
     * @return bool|null
     */
    public function getEmailExpirationTextDisabled()
    {
        return $this->container['email_expiration_text_disabled'];
    }

    /**
     * Sets email_expiration_text_disabled
     *
     * @param bool|null $email_expiration_text_disabled email_expiration_text_disabled
     *
     * @return self
     */
    public function setEmailExpirationTextDisabled($email_expiration_text_disabled)
    {
        if (is_null($email_expiration_text_disabled)) {
            array_push($this->openAPINullablesSetToNull, 'email_expiration_text_disabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_expiration_text_disabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_expiration_text_disabled'] = $email_expiration_text_disabled;

        return $this;
    }

    /**
     * Gets recipients_activity_disabled
     *
     * @return bool|null
     */
    public function getRecipientsActivityDisabled()
    {
        return $this->container['recipients_activity_disabled'];
    }

    /**
     * Sets recipients_activity_disabled
     *
     * @param bool|null $recipients_activity_disabled recipients_activity_disabled
     *
     * @return self
     */
    public function setRecipientsActivityDisabled($recipients_activity_disabled)
    {
        if (is_null($recipients_activity_disabled)) {
            array_push($this->openAPINullablesSetToNull, 'recipients_activity_disabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipients_activity_disabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipients_activity_disabled'] = $recipients_activity_disabled;

        return $this;
    }

    /**
     * Gets download_documents_disabled
     *
     * @return bool|null
     */
    public function getDownloadDocumentsDisabled()
    {
        return $this->container['download_documents_disabled'];
    }

    /**
     * Sets download_documents_disabled
     *
     * @param bool|null $download_documents_disabled If false, signers won't be able to download documents before signing.
     *
     * @return self
     */
    public function setDownloadDocumentsDisabled($download_documents_disabled)
    {
        if (is_null($download_documents_disabled)) {
            array_push($this->openAPINullablesSetToNull, 'download_documents_disabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('download_documents_disabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['download_documents_disabled'] = $download_documents_disabled;

        return $this;
    }

    /**
     * Gets redirect_urls
     *
     * @return \OpenAPI\Client\Model\UpdateCustomExperienceRedirectUrls|null
     */
    public function getRedirectUrls()
    {
        return $this->container['redirect_urls'];
    }

    /**
     * Sets redirect_urls
     *
     * @param \OpenAPI\Client\Model\UpdateCustomExperienceRedirectUrls|null $redirect_urls redirect_urls
     *
     * @return self
     */
    public function setRedirectUrls($redirect_urls)
    {
        if (is_null($redirect_urls)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_urls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_urls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_urls'] = $redirect_urls;

        return $this;
    }

    /**
     * Gets logo_layout
     *
     * @return \OpenAPI\Client\Model\LogoLayout|null
     */
    public function getLogoLayout()
    {
        return $this->container['logo_layout'];
    }

    /**
     * Sets logo_layout
     *
     * @param \OpenAPI\Client\Model\LogoLayout|null $logo_layout logo_layout
     *
     * @return self
     */
    public function setLogoLayout($logo_layout)
    {
        if (is_null($logo_layout)) {
            throw new \InvalidArgumentException('non-nullable logo_layout cannot be null');
        }
        $this->container['logo_layout'] = $logo_layout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


