<?php
/**
 * ConsumptionApp
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConsumptionApp Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConsumptionApp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Consumption_app';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'electronic_signature' => 'int',
        'advanced_electronic_signature' => 'int',
        'advanced_electronic_signature_with_qualified_certificate' => 'int',
        'qualified_electronic_signature_identification_mode' => '\OpenAPI\Client\Model\ConsumptionAppQualifiedElectronicSignatureIdentificationMode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'electronic_signature' => null,
        'advanced_electronic_signature' => null,
        'advanced_electronic_signature_with_qualified_certificate' => null,
        'qualified_electronic_signature_identification_mode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'electronic_signature' => false,
        'advanced_electronic_signature' => false,
        'advanced_electronic_signature_with_qualified_certificate' => false,
        'qualified_electronic_signature_identification_mode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'electronic_signature' => 'electronic_signature',
        'advanced_electronic_signature' => 'advanced_electronic_signature',
        'advanced_electronic_signature_with_qualified_certificate' => 'advanced_electronic_signature_with_qualified_certificate',
        'qualified_electronic_signature_identification_mode' => 'qualified_electronic_signature_identification_mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'electronic_signature' => 'setElectronicSignature',
        'advanced_electronic_signature' => 'setAdvancedElectronicSignature',
        'advanced_electronic_signature_with_qualified_certificate' => 'setAdvancedElectronicSignatureWithQualifiedCertificate',
        'qualified_electronic_signature_identification_mode' => 'setQualifiedElectronicSignatureIdentificationMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'electronic_signature' => 'getElectronicSignature',
        'advanced_electronic_signature' => 'getAdvancedElectronicSignature',
        'advanced_electronic_signature_with_qualified_certificate' => 'getAdvancedElectronicSignatureWithQualifiedCertificate',
        'qualified_electronic_signature_identification_mode' => 'getQualifiedElectronicSignatureIdentificationMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('electronic_signature', $data ?? [], null);
        $this->setIfExists('advanced_electronic_signature', $data ?? [], null);
        $this->setIfExists('advanced_electronic_signature_with_qualified_certificate', $data ?? [], null);
        $this->setIfExists('qualified_electronic_signature_identification_mode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['electronic_signature'] === null) {
            $invalidProperties[] = "'electronic_signature' can't be null";
        }
        if (($this->container['electronic_signature'] < 0)) {
            $invalidProperties[] = "invalid value for 'electronic_signature', must be bigger than or equal to 0.";
        }

        if ($this->container['advanced_electronic_signature'] === null) {
            $invalidProperties[] = "'advanced_electronic_signature' can't be null";
        }
        if (($this->container['advanced_electronic_signature'] < 0)) {
            $invalidProperties[] = "invalid value for 'advanced_electronic_signature', must be bigger than or equal to 0.";
        }

        if ($this->container['advanced_electronic_signature_with_qualified_certificate'] === null) {
            $invalidProperties[] = "'advanced_electronic_signature_with_qualified_certificate' can't be null";
        }
        if (($this->container['advanced_electronic_signature_with_qualified_certificate'] < 0)) {
            $invalidProperties[] = "invalid value for 'advanced_electronic_signature_with_qualified_certificate', must be bigger than or equal to 0.";
        }

        if ($this->container['qualified_electronic_signature_identification_mode'] === null) {
            $invalidProperties[] = "'qualified_electronic_signature_identification_mode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets electronic_signature
     *
     * @return int
     */
    public function getElectronicSignature()
    {
        return $this->container['electronic_signature'];
    }

    /**
     * Sets electronic_signature
     *
     * @param int $electronic_signature electronic_signature
     *
     * @return self
     */
    public function setElectronicSignature($electronic_signature)
    {
        if (is_null($electronic_signature)) {
            throw new \InvalidArgumentException('non-nullable electronic_signature cannot be null');
        }

        if (($electronic_signature < 0)) {
            throw new \InvalidArgumentException('invalid value for $electronic_signature when calling ConsumptionApp., must be bigger than or equal to 0.');
        }

        $this->container['electronic_signature'] = $electronic_signature;

        return $this;
    }

    /**
     * Gets advanced_electronic_signature
     *
     * @return int
     */
    public function getAdvancedElectronicSignature()
    {
        return $this->container['advanced_electronic_signature'];
    }

    /**
     * Sets advanced_electronic_signature
     *
     * @param int $advanced_electronic_signature advanced_electronic_signature
     *
     * @return self
     */
    public function setAdvancedElectronicSignature($advanced_electronic_signature)
    {
        if (is_null($advanced_electronic_signature)) {
            throw new \InvalidArgumentException('non-nullable advanced_electronic_signature cannot be null');
        }

        if (($advanced_electronic_signature < 0)) {
            throw new \InvalidArgumentException('invalid value for $advanced_electronic_signature when calling ConsumptionApp., must be bigger than or equal to 0.');
        }

        $this->container['advanced_electronic_signature'] = $advanced_electronic_signature;

        return $this;
    }

    /**
     * Gets advanced_electronic_signature_with_qualified_certificate
     *
     * @return int
     */
    public function getAdvancedElectronicSignatureWithQualifiedCertificate()
    {
        return $this->container['advanced_electronic_signature_with_qualified_certificate'];
    }

    /**
     * Sets advanced_electronic_signature_with_qualified_certificate
     *
     * @param int $advanced_electronic_signature_with_qualified_certificate advanced_electronic_signature_with_qualified_certificate
     *
     * @return self
     */
    public function setAdvancedElectronicSignatureWithQualifiedCertificate($advanced_electronic_signature_with_qualified_certificate)
    {
        if (is_null($advanced_electronic_signature_with_qualified_certificate)) {
            throw new \InvalidArgumentException('non-nullable advanced_electronic_signature_with_qualified_certificate cannot be null');
        }

        if (($advanced_electronic_signature_with_qualified_certificate < 0)) {
            throw new \InvalidArgumentException('invalid value for $advanced_electronic_signature_with_qualified_certificate when calling ConsumptionApp., must be bigger than or equal to 0.');
        }

        $this->container['advanced_electronic_signature_with_qualified_certificate'] = $advanced_electronic_signature_with_qualified_certificate;

        return $this;
    }

    /**
     * Gets qualified_electronic_signature_identification_mode
     *
     * @return \OpenAPI\Client\Model\ConsumptionAppQualifiedElectronicSignatureIdentificationMode
     */
    public function getQualifiedElectronicSignatureIdentificationMode()
    {
        return $this->container['qualified_electronic_signature_identification_mode'];
    }

    /**
     * Sets qualified_electronic_signature_identification_mode
     *
     * @param \OpenAPI\Client\Model\ConsumptionAppQualifiedElectronicSignatureIdentificationMode $qualified_electronic_signature_identification_mode qualified_electronic_signature_identification_mode
     *
     * @return self
     */
    public function setQualifiedElectronicSignatureIdentificationMode($qualified_electronic_signature_identification_mode)
    {
        if (is_null($qualified_electronic_signature_identification_mode)) {
            throw new \InvalidArgumentException('non-nullable qualified_electronic_signature_identification_mode cannot be null');
        }
        $this->container['qualified_electronic_signature_identification_mode'] = $qualified_electronic_signature_identification_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


