<?php
/**
 * IdentityDocumentFullAllOfDataExtractedFromDocument
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IdentityDocumentFullAllOfDataExtractedFromDocument Class Doc Comment
 *
 * @category Class
 * @description Information extracted from the verified identity document
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IdentityDocumentFullAllOfDataExtractedFromDocument implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IdentityDocumentFull_allOf_data_extracted_from_document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'birth_name' => 'string',
        'last_name' => 'string',
        'born_on' => '\DateTime',
        'birth_location' => 'string',
        'gender' => 'string',
        'full_address' => 'string',
        'type' => 'string',
        'issuing_country_code' => 'string',
        'issued_on' => '\DateTime',
        'expired_on' => '\DateTime',
        'document_number' => 'string',
        'mrz' => '\OpenAPI\Client\Model\GetIdDocumentVerification200ResponseAllOfExtractedFromDocumentMrz'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'birth_name' => null,
        'last_name' => null,
        'born_on' => 'date',
        'birth_location' => null,
        'gender' => null,
        'full_address' => null,
        'type' => null,
        'issuing_country_code' => 'ISO 3166-1 alpha-2',
        'issued_on' => 'date',
        'expired_on' => 'date',
        'document_number' => null,
        'mrz' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_name' => true,
        'birth_name' => true,
        'last_name' => true,
        'born_on' => true,
        'birth_location' => true,
        'gender' => true,
        'full_address' => true,
        'type' => true,
        'issuing_country_code' => true,
        'issued_on' => true,
        'expired_on' => true,
        'document_number' => true,
        'mrz' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'first_name',
        'birth_name' => 'birth_name',
        'last_name' => 'last_name',
        'born_on' => 'born_on',
        'birth_location' => 'birth_location',
        'gender' => 'gender',
        'full_address' => 'full_address',
        'type' => 'type',
        'issuing_country_code' => 'issuing_country_code',
        'issued_on' => 'issued_on',
        'expired_on' => 'expired_on',
        'document_number' => 'document_number',
        'mrz' => 'mrz'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'birth_name' => 'setBirthName',
        'last_name' => 'setLastName',
        'born_on' => 'setBornOn',
        'birth_location' => 'setBirthLocation',
        'gender' => 'setGender',
        'full_address' => 'setFullAddress',
        'type' => 'setType',
        'issuing_country_code' => 'setIssuingCountryCode',
        'issued_on' => 'setIssuedOn',
        'expired_on' => 'setExpiredOn',
        'document_number' => 'setDocumentNumber',
        'mrz' => 'setMrz'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'birth_name' => 'getBirthName',
        'last_name' => 'getLastName',
        'born_on' => 'getBornOn',
        'birth_location' => 'getBirthLocation',
        'gender' => 'getGender',
        'full_address' => 'getFullAddress',
        'type' => 'getType',
        'issuing_country_code' => 'getIssuingCountryCode',
        'issued_on' => 'getIssuedOn',
        'expired_on' => 'getExpiredOn',
        'document_number' => 'getDocumentNumber',
        'mrz' => 'getMrz'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GENDER_F = 'f';
    public const GENDER_M = 'm';
    public const GENDER_X = 'x';
    public const TYPE_ID_CARD = 'id_card';
    public const TYPE_PASSPORT = 'passport';
    public const TYPE_RESIDENCE_PERMIT = 'residence_permit';
    public const TYPE_DRIVER_LICENSE = 'driver_license';
    public const TYPE_ITA_TS_CNS = 'ita_ts_cns';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_F,
            self::GENDER_M,
            self::GENDER_X,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ID_CARD,
            self::TYPE_PASSPORT,
            self::TYPE_RESIDENCE_PERMIT,
            self::TYPE_DRIVER_LICENSE,
            self::TYPE_ITA_TS_CNS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('birth_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('born_on', $data ?? [], null);
        $this->setIfExists('birth_location', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('full_address', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('issuing_country_code', $data ?? [], null);
        $this->setIfExists('issued_on', $data ?? [], null);
        $this->setIfExists('expired_on', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('mrz', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['birth_name'] === null) {
            $invalidProperties[] = "'birth_name' can't be null";
        }
        if ((mb_strlen($this->container['birth_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'birth_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['born_on'] === null) {
            $invalidProperties[] = "'born_on' can't be null";
        }
        if ($this->container['birth_location'] === null) {
            $invalidProperties[] = "'birth_location' can't be null";
        }
        if ((mb_strlen($this->container['birth_location']) < 1)) {
            $invalidProperties[] = "invalid value for 'birth_location', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['full_address'] === null) {
            $invalidProperties[] = "'full_address' can't be null";
        }
        if ((mb_strlen($this->container['full_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'full_address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['issuing_country_code'] === null) {
            $invalidProperties[] = "'issuing_country_code' can't be null";
        }
        if (!preg_match("/^[A-Za-z]{2}$/", $this->container['issuing_country_code'])) {
            $invalidProperties[] = "invalid value for 'issuing_country_code', must be conform to the pattern /^[A-Za-z]{2}$/.";
        }

        if ($this->container['issued_on'] === null) {
            $invalidProperties[] = "'issued_on' can't be null";
        }
        if (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", $this->container['issued_on'])) {
            $invalidProperties[] = "invalid value for 'issued_on', must be conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.";
        }

        if ($this->container['expired_on'] === null) {
            $invalidProperties[] = "'expired_on' can't be null";
        }
        if (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", $this->container['expired_on'])) {
            $invalidProperties[] = "invalid value for 'expired_on', must be conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.";
        }

        if ($this->container['document_number'] === null) {
            $invalidProperties[] = "'document_number' can't be null";
        }
        if ($this->container['mrz'] === null) {
            $invalidProperties[] = "'mrz' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The document holder's first name as it appears on the identity document
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($first_name) && (mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling IdentityDocumentFullAllOfDataExtractedFromDocument., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets birth_name
     *
     * @return string
     */
    public function getBirthName()
    {
        return $this->container['birth_name'];
    }

    /**
     * Sets birth_name
     *
     * @param string $birth_name The document holder's birth name (family name at birth)
     *
     * @return self
     */
    public function setBirthName($birth_name)
    {
        if (is_null($birth_name)) {
            array_push($this->openAPINullablesSetToNull, 'birth_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($birth_name) && (mb_strlen($birth_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $birth_name when calling IdentityDocumentFullAllOfDataExtractedFromDocument., must be bigger than or equal to 1.');
        }

        $this->container['birth_name'] = $birth_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The document holder's current last name (may differ from birth name)
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($last_name) && (mb_strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling IdentityDocumentFullAllOfDataExtractedFromDocument., must be bigger than or equal to 1.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets born_on
     *
     * @return \DateTime
     */
    public function getBornOn()
    {
        return $this->container['born_on'];
    }

    /**
     * Sets born_on
     *
     * @param \DateTime $born_on The document holder's date of birth as it appears on the document
     *
     * @return self
     */
    public function setBornOn($born_on)
    {
        if (is_null($born_on)) {
            array_push($this->openAPINullablesSetToNull, 'born_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('born_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['born_on'] = $born_on;

        return $this;
    }

    /**
     * Gets birth_location
     *
     * @return string
     */
    public function getBirthLocation()
    {
        return $this->container['birth_location'];
    }

    /**
     * Sets birth_location
     *
     * @param string $birth_location The holder's place of birth as it appears on the document
     *
     * @return self
     */
    public function setBirthLocation($birth_location)
    {
        if (is_null($birth_location)) {
            array_push($this->openAPINullablesSetToNull, 'birth_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($birth_location) && (mb_strlen($birth_location) < 1)) {
            throw new \InvalidArgumentException('invalid length for $birth_location when calling IdentityDocumentFullAllOfDataExtractedFromDocument., must be bigger than or equal to 1.');
        }

        $this->container['birth_location'] = $birth_location;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender The holder's gender as it appears on the document. \"m\" for Male, \"f\" for Female, \"x\" for Non-binary or unspecified.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets full_address
     *
     * @return string
     */
    public function getFullAddress()
    {
        return $this->container['full_address'];
    }

    /**
     * Sets full_address
     *
     * @param string $full_address The holder's complete postal address as it appears on the document
     *
     * @return self
     */
    public function setFullAddress($full_address)
    {
        if (is_null($full_address)) {
            array_push($this->openAPINullablesSetToNull, 'full_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('full_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($full_address) && (mb_strlen($full_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $full_address when calling IdentityDocumentFullAllOfDataExtractedFromDocument., must be bigger than or equal to 1.');
        }

        $this->container['full_address'] = $full_address;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of identity document that was verified
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets issuing_country_code
     *
     * @return string
     */
    public function getIssuingCountryCode()
    {
        return $this->container['issuing_country_code'];
    }

    /**
     * Sets issuing_country_code
     *
     * @param string $issuing_country_code The country that issued the document (ISO 3166-1 alpha-2 code)
     *
     * @return self
     */
    public function setIssuingCountryCode($issuing_country_code)
    {
        if (is_null($issuing_country_code)) {
            array_push($this->openAPINullablesSetToNull, 'issuing_country_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuing_country_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($issuing_country_code) && (!preg_match("/^[A-Za-z]{2}$/", ObjectSerializer::toString($issuing_country_code)))) {
            throw new \InvalidArgumentException("invalid value for \$issuing_country_code when calling IdentityDocumentFullAllOfDataExtractedFromDocument., must conform to the pattern /^[A-Za-z]{2}$/.");
        }

        $this->container['issuing_country_code'] = $issuing_country_code;

        return $this;
    }

    /**
     * Gets issued_on
     *
     * @return \DateTime
     */
    public function getIssuedOn()
    {
        return $this->container['issued_on'];
    }

    /**
     * Sets issued_on
     *
     * @param \DateTime $issued_on The date when the document was issued
     *
     * @return self
     */
    public function setIssuedOn($issued_on)
    {
        if (is_null($issued_on)) {
            array_push($this->openAPINullablesSetToNull, 'issued_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issued_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($issued_on) && (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", ObjectSerializer::toString($issued_on)))) {
            throw new \InvalidArgumentException("invalid value for \$issued_on when calling IdentityDocumentFullAllOfDataExtractedFromDocument., must conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.");
        }

        $this->container['issued_on'] = $issued_on;

        return $this;
    }

    /**
     * Gets expired_on
     *
     * @return \DateTime
     */
    public function getExpiredOn()
    {
        return $this->container['expired_on'];
    }

    /**
     * Sets expired_on
     *
     * @param \DateTime $expired_on The date when the document legally expires
     *
     * @return self
     */
    public function setExpiredOn($expired_on)
    {
        if (is_null($expired_on)) {
            array_push($this->openAPINullablesSetToNull, 'expired_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expired_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($expired_on) && (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", ObjectSerializer::toString($expired_on)))) {
            throw new \InvalidArgumentException("invalid value for \$expired_on when calling IdentityDocumentFullAllOfDataExtractedFromDocument., must conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.");
        }

        $this->container['expired_on'] = $expired_on;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number Document identifier number (may contain letters)
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {
        if (is_null($document_number)) {
            array_push($this->openAPINullablesSetToNull, 'document_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets mrz
     *
     * @return \OpenAPI\Client\Model\GetIdDocumentVerification200ResponseAllOfExtractedFromDocumentMrz
     */
    public function getMrz()
    {
        return $this->container['mrz'];
    }

    /**
     * Sets mrz
     *
     * @param \OpenAPI\Client\Model\GetIdDocumentVerification200ResponseAllOfExtractedFromDocumentMrz $mrz mrz
     *
     * @return self
     */
    public function setMrz($mrz)
    {
        if (is_null($mrz)) {
            throw new \InvalidArgumentException('non-nullable mrz cannot be null');
        }
        $this->container['mrz'] = $mrz;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


