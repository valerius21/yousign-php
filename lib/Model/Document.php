<?php
/**
 * Document
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @description Document to attach to a Signature Request
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Document implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'filename' => 'string',
        'nature' => 'string',
        'content_type' => 'string',
        'sha256' => 'string',
        'is_protected' => 'bool',
        'is_signed' => 'bool',
        'created_at' => '\DateTime',
        'total_pages' => 'int',
        'is_locked' => 'bool',
        'initials' => '\OpenAPI\Client\Model\DocumentInitials',
        'total_anchors' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'filename' => null,
        'nature' => null,
        'content_type' => null,
        'sha256' => null,
        'is_protected' => null,
        'is_signed' => null,
        'created_at' => 'date-time',
        'total_pages' => null,
        'is_locked' => null,
        'initials' => null,
        'total_anchors' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'filename' => false,
        'nature' => false,
        'content_type' => false,
        'sha256' => false,
        'is_protected' => false,
        'is_signed' => false,
        'created_at' => false,
        'total_pages' => true,
        'is_locked' => false,
        'initials' => true,
        'total_anchors' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'filename' => 'filename',
        'nature' => 'nature',
        'content_type' => 'content_type',
        'sha256' => 'sha256',
        'is_protected' => 'is_protected',
        'is_signed' => 'is_signed',
        'created_at' => 'created_at',
        'total_pages' => 'total_pages',
        'is_locked' => 'is_locked',
        'initials' => 'initials',
        'total_anchors' => 'total_anchors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'filename' => 'setFilename',
        'nature' => 'setNature',
        'content_type' => 'setContentType',
        'sha256' => 'setSha256',
        'is_protected' => 'setIsProtected',
        'is_signed' => 'setIsSigned',
        'created_at' => 'setCreatedAt',
        'total_pages' => 'setTotalPages',
        'is_locked' => 'setIsLocked',
        'initials' => 'setInitials',
        'total_anchors' => 'setTotalAnchors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'filename' => 'getFilename',
        'nature' => 'getNature',
        'content_type' => 'getContentType',
        'sha256' => 'getSha256',
        'is_protected' => 'getIsProtected',
        'is_signed' => 'getIsSigned',
        'created_at' => 'getCreatedAt',
        'total_pages' => 'getTotalPages',
        'is_locked' => 'getIsLocked',
        'initials' => 'getInitials',
        'total_anchors' => 'getTotalAnchors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NATURE_ATTACHMENT = 'attachment';
    public const NATURE_SIGNABLE_DOCUMENT = 'signable_document';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNatureAllowableValues()
    {
        return [
            self::NATURE_ATTACHMENT,
            self::NATURE_SIGNABLE_DOCUMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('filename', $data ?? [], null);
        $this->setIfExists('nature', $data ?? [], null);
        $this->setIfExists('content_type', $data ?? [], null);
        $this->setIfExists('sha256', $data ?? [], null);
        $this->setIfExists('is_protected', $data ?? [], null);
        $this->setIfExists('is_signed', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('total_pages', $data ?? [], null);
        $this->setIfExists('is_locked', $data ?? [], null);
        $this->setIfExists('initials', $data ?? [], null);
        $this->setIfExists('total_anchors', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['filename'] === null) {
            $invalidProperties[] = "'filename' can't be null";
        }
        if ((mb_strlen($this->container['filename']) > 255)) {
            $invalidProperties[] = "invalid value for 'filename', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['filename']) < 1)) {
            $invalidProperties[] = "invalid value for 'filename', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['nature'] === null) {
            $invalidProperties[] = "'nature' can't be null";
        }
        $allowedValues = $this->getNatureAllowableValues();
        if (!is_null($this->container['nature']) && !in_array($this->container['nature'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nature', must be one of '%s'",
                $this->container['nature'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['content_type'] === null) {
            $invalidProperties[] = "'content_type' can't be null";
        }
        if ($this->container['sha256'] === null) {
            $invalidProperties[] = "'sha256' can't be null";
        }
        if ($this->container['is_protected'] === null) {
            $invalidProperties[] = "'is_protected' can't be null";
        }
        if ($this->container['is_signed'] === null) {
            $invalidProperties[] = "'is_signed' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['total_pages'] === null) {
            $invalidProperties[] = "'total_pages' can't be null";
        }
        if (($this->container['total_pages'] < 1)) {
            $invalidProperties[] = "invalid value for 'total_pages', must be bigger than or equal to 1.";
        }

        if ($this->container['is_locked'] === null) {
            $invalidProperties[] = "'is_locked' can't be null";
        }
        if ($this->container['initials'] === null) {
            $invalidProperties[] = "'initials' can't be null";
        }
        if ($this->container['total_anchors'] === null) {
            $invalidProperties[] = "'total_anchors' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename filename
     *
     * @return self
     */
    public function setFilename($filename)
    {
        if (is_null($filename)) {
            throw new \InvalidArgumentException('non-nullable filename cannot be null');
        }
        if ((mb_strlen($filename) > 255)) {
            throw new \InvalidArgumentException('invalid length for $filename when calling Document., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($filename) < 1)) {
            throw new \InvalidArgumentException('invalid length for $filename when calling Document., must be bigger than or equal to 1.');
        }

        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets nature
     *
     * @return string
     */
    public function getNature()
    {
        return $this->container['nature'];
    }

    /**
     * Sets nature
     *
     * @param string $nature nature
     *
     * @return self
     */
    public function setNature($nature)
    {
        if (is_null($nature)) {
            throw new \InvalidArgumentException('non-nullable nature cannot be null');
        }
        $allowedValues = $this->getNatureAllowableValues();
        if (!in_array($nature, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nature', must be one of '%s'",
                    $nature,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nature'] = $nature;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type content_type
     *
     * @return self
     */
    public function setContentType($content_type)
    {
        if (is_null($content_type)) {
            throw new \InvalidArgumentException('non-nullable content_type cannot be null');
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string $sha256 Sha256 checksum
     *
     * @return self
     */
    public function setSha256($sha256)
    {
        if (is_null($sha256)) {
            throw new \InvalidArgumentException('non-nullable sha256 cannot be null');
        }
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets is_protected
     *
     * @return bool
     */
    public function getIsProtected()
    {
        return $this->container['is_protected'];
    }

    /**
     * Sets is_protected
     *
     * @param bool $is_protected is_protected
     *
     * @return self
     */
    public function setIsProtected($is_protected)
    {
        if (is_null($is_protected)) {
            throw new \InvalidArgumentException('non-nullable is_protected cannot be null');
        }
        $this->container['is_protected'] = $is_protected;

        return $this;
    }

    /**
     * Gets is_signed
     *
     * @return bool
     */
    public function getIsSigned()
    {
        return $this->container['is_signed'];
    }

    /**
     * Sets is_signed
     *
     * @param bool $is_signed is_signed
     *
     * @return self
     */
    public function setIsSigned($is_signed)
    {
        if (is_null($is_signed)) {
            throw new \InvalidArgumentException('non-nullable is_signed cannot be null');
        }
        $this->container['is_signed'] = $is_signed;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets total_pages
     *
     * @return int
     */
    public function getTotalPages()
    {
        return $this->container['total_pages'];
    }

    /**
     * Sets total_pages
     *
     * @param int $total_pages Number of pages for signable document
     *
     * @return self
     */
    public function setTotalPages($total_pages)
    {
        if (is_null($total_pages)) {
            array_push($this->openAPINullablesSetToNull, 'total_pages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_pages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($total_pages) && ($total_pages < 1)) {
            throw new \InvalidArgumentException('invalid value for $total_pages when calling Document., must be bigger than or equal to 1.');
        }

        $this->container['total_pages'] = $total_pages;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool $is_locked If protected by password and not yet unlocked
     *
     * @return self
     */
    public function setIsLocked($is_locked)
    {
        if (is_null($is_locked)) {
            throw new \InvalidArgumentException('non-nullable is_locked cannot be null');
        }
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return \OpenAPI\Client\Model\DocumentInitials
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param \OpenAPI\Client\Model\DocumentInitials $initials initials
     *
     * @return self
     */
    public function setInitials($initials)
    {
        if (is_null($initials)) {
            array_push($this->openAPINullablesSetToNull, 'initials');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initials', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets total_anchors
     *
     * @return int
     */
    public function getTotalAnchors()
    {
        return $this->container['total_anchors'];
    }

    /**
     * Sets total_anchors
     *
     * @param int $total_anchors Number of parsed anchors from the document.
     *
     * @return self
     */
    public function setTotalAnchors($total_anchors)
    {
        if (is_null($total_anchors)) {
            throw new \InvalidArgumentException('non-nullable total_anchors cannot be null');
        }
        $this->container['total_anchors'] = $total_anchors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


