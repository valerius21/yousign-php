<?php
/**
 * SignatureRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SignatureRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SignatureRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignatureRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => '\OpenAPI\Client\Model\SignatureRequestStatus',
        'name' => 'string',
        'delivery_mode' => 'string',
        'created_at' => '\DateTime',
        'ordered_signers' => 'bool',
        'ordered_approvers' => 'bool',
        'reminder_settings' => '\OpenAPI\Client\Model\SignatureRequestInListReminderSettings',
        'timezone' => 'string',
        'email_custom_note' => 'string',
        'expiration_date' => '\DateTime',
        'source' => 'string',
        'signers' => '\OpenAPI\Client\Model\SignatureRequestInListSignersInner[]',
        'approvers' => '\OpenAPI\Client\Model\SignatureRequestInListApproversInner[]',
        'labels' => '\OpenAPI\Client\Model\SignatureRequestLabel[]',
        'documents' => '\OpenAPI\Client\Model\SignatureRequestInListDocumentsInner[]',
        'sender' => '\OpenAPI\Client\Model\SignatureRequestInListSender',
        'external_id' => 'string',
        'branding_id' => 'string',
        'custom_experience_id' => 'string',
        'signers_allowed_to_decline' => 'bool',
        'workspace_id' => 'string',
        'audit_trail_locale' => '\OpenAPI\Client\Model\AuditTrailLocale',
        'email_notification' => '\OpenAPI\Client\Model\SignatureRequestEmailNotification',
        'bulk_send_batch_id' => 'string',
        'decline_information' => '\OpenAPI\Client\Model\SignatureRequestDeclineInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'name' => null,
        'delivery_mode' => null,
        'created_at' => 'date-time',
        'ordered_signers' => null,
        'ordered_approvers' => null,
        'reminder_settings' => null,
        'timezone' => null,
        'email_custom_note' => null,
        'expiration_date' => 'date-time',
        'source' => null,
        'signers' => null,
        'approvers' => null,
        'labels' => null,
        'documents' => null,
        'sender' => null,
        'external_id' => null,
        'branding_id' => 'uuid',
        'custom_experience_id' => 'uuid',
        'signers_allowed_to_decline' => null,
        'workspace_id' => 'uuid',
        'audit_trail_locale' => null,
        'email_notification' => null,
        'bulk_send_batch_id' => 'uuid',
        'decline_information' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'status' => false,
        'name' => false,
        'delivery_mode' => false,
        'created_at' => false,
        'ordered_signers' => false,
        'ordered_approvers' => false,
        'reminder_settings' => true,
        'timezone' => false,
        'email_custom_note' => true,
        'expiration_date' => false,
        'source' => false,
        'signers' => false,
        'approvers' => false,
        'labels' => false,
        'documents' => false,
        'sender' => true,
        'external_id' => true,
        'branding_id' => true,
        'custom_experience_id' => true,
        'signers_allowed_to_decline' => false,
        'workspace_id' => false,
        'audit_trail_locale' => false,
        'email_notification' => false,
        'bulk_send_batch_id' => true,
        'decline_information' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'name' => 'name',
        'delivery_mode' => 'delivery_mode',
        'created_at' => 'created_at',
        'ordered_signers' => 'ordered_signers',
        'ordered_approvers' => 'ordered_approvers',
        'reminder_settings' => 'reminder_settings',
        'timezone' => 'timezone',
        'email_custom_note' => 'email_custom_note',
        'expiration_date' => 'expiration_date',
        'source' => 'source',
        'signers' => 'signers',
        'approvers' => 'approvers',
        'labels' => 'labels',
        'documents' => 'documents',
        'sender' => 'sender',
        'external_id' => 'external_id',
        'branding_id' => 'branding_id',
        'custom_experience_id' => 'custom_experience_id',
        'signers_allowed_to_decline' => 'signers_allowed_to_decline',
        'workspace_id' => 'workspace_id',
        'audit_trail_locale' => 'audit_trail_locale',
        'email_notification' => 'email_notification',
        'bulk_send_batch_id' => 'bulk_send_batch_id',
        'decline_information' => 'decline_information'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'name' => 'setName',
        'delivery_mode' => 'setDeliveryMode',
        'created_at' => 'setCreatedAt',
        'ordered_signers' => 'setOrderedSigners',
        'ordered_approvers' => 'setOrderedApprovers',
        'reminder_settings' => 'setReminderSettings',
        'timezone' => 'setTimezone',
        'email_custom_note' => 'setEmailCustomNote',
        'expiration_date' => 'setExpirationDate',
        'source' => 'setSource',
        'signers' => 'setSigners',
        'approvers' => 'setApprovers',
        'labels' => 'setLabels',
        'documents' => 'setDocuments',
        'sender' => 'setSender',
        'external_id' => 'setExternalId',
        'branding_id' => 'setBrandingId',
        'custom_experience_id' => 'setCustomExperienceId',
        'signers_allowed_to_decline' => 'setSignersAllowedToDecline',
        'workspace_id' => 'setWorkspaceId',
        'audit_trail_locale' => 'setAuditTrailLocale',
        'email_notification' => 'setEmailNotification',
        'bulk_send_batch_id' => 'setBulkSendBatchId',
        'decline_information' => 'setDeclineInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'name' => 'getName',
        'delivery_mode' => 'getDeliveryMode',
        'created_at' => 'getCreatedAt',
        'ordered_signers' => 'getOrderedSigners',
        'ordered_approvers' => 'getOrderedApprovers',
        'reminder_settings' => 'getReminderSettings',
        'timezone' => 'getTimezone',
        'email_custom_note' => 'getEmailCustomNote',
        'expiration_date' => 'getExpirationDate',
        'source' => 'getSource',
        'signers' => 'getSigners',
        'approvers' => 'getApprovers',
        'labels' => 'getLabels',
        'documents' => 'getDocuments',
        'sender' => 'getSender',
        'external_id' => 'getExternalId',
        'branding_id' => 'getBrandingId',
        'custom_experience_id' => 'getCustomExperienceId',
        'signers_allowed_to_decline' => 'getSignersAllowedToDecline',
        'workspace_id' => 'getWorkspaceId',
        'audit_trail_locale' => 'getAuditTrailLocale',
        'email_notification' => 'getEmailNotification',
        'bulk_send_batch_id' => 'getBulkSendBatchId',
        'decline_information' => 'getDeclineInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DELIVERY_MODE_EMAIL = 'email';
    public const DELIVERY_MODE_NONE = 'none';
    public const SOURCE_APP = 'app';
    public const SOURCE_PUBLIC_API = 'public_api';
    public const SOURCE_HUBSPOT_INTEGRATION = 'hubspot_integration';
    public const SOURCE_CONNECTOR_SALESFORCE_API = 'connector_salesforce_api';
    public const SOURCE_CONNECTOR_GOOGLE_API = 'connector_google_api';
    public const SOURCE_CONNECTOR_ZAPIER_API = 'connector_zapier_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryModeAllowableValues()
    {
        return [
            self::DELIVERY_MODE_EMAIL,
            self::DELIVERY_MODE_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_APP,
            self::SOURCE_PUBLIC_API,
            self::SOURCE_HUBSPOT_INTEGRATION,
            self::SOURCE_CONNECTOR_SALESFORCE_API,
            self::SOURCE_CONNECTOR_GOOGLE_API,
            self::SOURCE_CONNECTOR_ZAPIER_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('delivery_mode', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('ordered_signers', $data ?? [], null);
        $this->setIfExists('ordered_approvers', $data ?? [], null);
        $this->setIfExists('reminder_settings', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], 'Europe/Paris');
        $this->setIfExists('email_custom_note', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('signers', $data ?? [], null);
        $this->setIfExists('approvers', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('branding_id', $data ?? [], null);
        $this->setIfExists('custom_experience_id', $data ?? [], null);
        $this->setIfExists('signers_allowed_to_decline', $data ?? [], null);
        $this->setIfExists('workspace_id', $data ?? [], null);
        $this->setIfExists('audit_trail_locale', $data ?? [], null);
        $this->setIfExists('email_notification', $data ?? [], null);
        $this->setIfExists('bulk_send_batch_id', $data ?? [], null);
        $this->setIfExists('decline_information', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 128)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['delivery_mode'] === null) {
            $invalidProperties[] = "'delivery_mode' can't be null";
        }
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!is_null($this->container['delivery_mode']) && !in_array($this->container['delivery_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_mode', must be one of '%s'",
                $this->container['delivery_mode'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ((mb_strlen($this->container['created_at']) < 1)) {
            $invalidProperties[] = "invalid value for 'created_at', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ordered_signers'] === null) {
            $invalidProperties[] = "'ordered_signers' can't be null";
        }
        if ($this->container['ordered_approvers'] === null) {
            $invalidProperties[] = "'ordered_approvers' can't be null";
        }
        if ($this->container['reminder_settings'] === null) {
            $invalidProperties[] = "'reminder_settings' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['email_custom_note'] === null) {
            $invalidProperties[] = "'email_custom_note' can't be null";
        }
        if ((mb_strlen($this->container['email_custom_note']) > 500)) {
            $invalidProperties[] = "invalid value for 'email_custom_note', the character length must be smaller than or equal to 500.";
        }

        if ($this->container['expiration_date'] === null) {
            $invalidProperties[] = "'expiration_date' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['signers'] === null) {
            $invalidProperties[] = "'signers' can't be null";
        }
        if ($this->container['documents'] === null) {
            $invalidProperties[] = "'documents' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        if ($this->container['branding_id'] === null) {
            $invalidProperties[] = "'branding_id' can't be null";
        }
        if ($this->container['custom_experience_id'] === null) {
            $invalidProperties[] = "'custom_experience_id' can't be null";
        }
        if ($this->container['signers_allowed_to_decline'] === null) {
            $invalidProperties[] = "'signers_allowed_to_decline' can't be null";
        }
        if ($this->container['audit_trail_locale'] === null) {
            $invalidProperties[] = "'audit_trail_locale' can't be null";
        }
        if ($this->container['email_notification'] === null) {
            $invalidProperties[] = "'email_notification' can't be null";
        }
        if ($this->container['bulk_send_batch_id'] === null) {
            $invalidProperties[] = "'bulk_send_batch_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling SignatureRequest., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\SignatureRequestStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\SignatureRequestStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SignatureRequest., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SignatureRequest., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets delivery_mode
     *
     * @return string
     */
    public function getDeliveryMode()
    {
        return $this->container['delivery_mode'];
    }

    /**
     * Sets delivery_mode
     *
     * @param string $delivery_mode delivery_mode
     *
     * @return self
     */
    public function setDeliveryMode($delivery_mode)
    {
        if (is_null($delivery_mode)) {
            throw new \InvalidArgumentException('non-nullable delivery_mode cannot be null');
        }
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!in_array($delivery_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_mode', must be one of '%s'",
                    $delivery_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_mode'] = $delivery_mode;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        if ((mb_strlen($created_at) < 1)) {
            throw new \InvalidArgumentException('invalid length for $created_at when calling SignatureRequest., must be bigger than or equal to 1.');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets ordered_signers
     *
     * @return bool
     */
    public function getOrderedSigners()
    {
        return $this->container['ordered_signers'];
    }

    /**
     * Sets ordered_signers
     *
     * @param bool $ordered_signers Enable an ordered workflow, each Signer will be requested to sign in a sequential order
     *
     * @return self
     */
    public function setOrderedSigners($ordered_signers)
    {
        if (is_null($ordered_signers)) {
            throw new \InvalidArgumentException('non-nullable ordered_signers cannot be null');
        }
        $this->container['ordered_signers'] = $ordered_signers;

        return $this;
    }

    /**
     * Gets ordered_approvers
     *
     * @return bool
     */
    public function getOrderedApprovers()
    {
        return $this->container['ordered_approvers'];
    }

    /**
     * Sets ordered_approvers
     *
     * @param bool $ordered_approvers Enable an ordered workflow, each Approver will be requested to approve in a sequential order
     *
     * @return self
     */
    public function setOrderedApprovers($ordered_approvers)
    {
        if (is_null($ordered_approvers)) {
            throw new \InvalidArgumentException('non-nullable ordered_approvers cannot be null');
        }
        $this->container['ordered_approvers'] = $ordered_approvers;

        return $this;
    }

    /**
     * Gets reminder_settings
     *
     * @return \OpenAPI\Client\Model\SignatureRequestInListReminderSettings
     */
    public function getReminderSettings()
    {
        return $this->container['reminder_settings'];
    }

    /**
     * Sets reminder_settings
     *
     * @param \OpenAPI\Client\Model\SignatureRequestInListReminderSettings $reminder_settings reminder_settings
     *
     * @return self
     */
    public function setReminderSettings($reminder_settings)
    {
        if (is_null($reminder_settings)) {
            array_push($this->openAPINullablesSetToNull, 'reminder_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reminder_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reminder_settings'] = $reminder_settings;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Time zone of the dates and times displayed in emails, the Signature Request expiration date, and the PDF Audit Trail. Format: tz database. Default is set to Europe/Paris.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets email_custom_note
     *
     * @return string
     * @deprecated
     */
    public function getEmailCustomNote()
    {
        return $this->container['email_custom_note'];
    }

    /**
     * Sets email_custom_note
     *
     * @param string $email_custom_note email_custom_note
     *
     * @return self
     * @deprecated
     */
    public function setEmailCustomNote($email_custom_note)
    {
        if (is_null($email_custom_note)) {
            array_push($this->openAPINullablesSetToNull, 'email_custom_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_custom_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email_custom_note) && (mb_strlen($email_custom_note) > 500)) {
            throw new \InvalidArgumentException('invalid length for $email_custom_note when calling SignatureRequest., must be smaller than or equal to 500.');
        }

        $this->container['email_custom_note'] = $email_custom_note;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets signers
     *
     * @return \OpenAPI\Client\Model\SignatureRequestInListSignersInner[]
     */
    public function getSigners()
    {
        return $this->container['signers'];
    }

    /**
     * Sets signers
     *
     * @param \OpenAPI\Client\Model\SignatureRequestInListSignersInner[] $signers signers
     *
     * @return self
     */
    public function setSigners($signers)
    {
        if (is_null($signers)) {
            throw new \InvalidArgumentException('non-nullable signers cannot be null');
        }
        $this->container['signers'] = $signers;

        return $this;
    }

    /**
     * Gets approvers
     *
     * @return \OpenAPI\Client\Model\SignatureRequestInListApproversInner[]|null
     */
    public function getApprovers()
    {
        return $this->container['approvers'];
    }

    /**
     * Sets approvers
     *
     * @param \OpenAPI\Client\Model\SignatureRequestInListApproversInner[]|null $approvers approvers
     *
     * @return self
     */
    public function setApprovers($approvers)
    {
        if (is_null($approvers)) {
            throw new \InvalidArgumentException('non-nullable approvers cannot be null');
        }
        $this->container['approvers'] = $approvers;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \OpenAPI\Client\Model\SignatureRequestLabel[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \OpenAPI\Client\Model\SignatureRequestLabel[]|null $labels Labels associated to the Signature Request
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \OpenAPI\Client\Model\SignatureRequestInListDocumentsInner[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \OpenAPI\Client\Model\SignatureRequestInListDocumentsInner[] $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \OpenAPI\Client\Model\SignatureRequestInListSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \OpenAPI\Client\Model\SignatureRequestInListSender $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            array_push($this->openAPINullablesSetToNull, 'sender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets branding_id
     *
     * @return string
     * @deprecated
     */
    public function getBrandingId()
    {
        return $this->container['branding_id'];
    }

    /**
     * Sets branding_id
     *
     * @param string $branding_id branding_id
     *
     * @return self
     * @deprecated
     */
    public function setBrandingId($branding_id)
    {
        if (is_null($branding_id)) {
            array_push($this->openAPINullablesSetToNull, 'branding_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branding_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['branding_id'] = $branding_id;

        return $this;
    }

    /**
     * Gets custom_experience_id
     *
     * @return string
     */
    public function getCustomExperienceId()
    {
        return $this->container['custom_experience_id'];
    }

    /**
     * Sets custom_experience_id
     *
     * @param string $custom_experience_id custom_experience_id
     *
     * @return self
     */
    public function setCustomExperienceId($custom_experience_id)
    {
        if (is_null($custom_experience_id)) {
            array_push($this->openAPINullablesSetToNull, 'custom_experience_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_experience_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_experience_id'] = $custom_experience_id;

        return $this;
    }

    /**
     * Gets signers_allowed_to_decline
     *
     * @return bool
     */
    public function getSignersAllowedToDecline()
    {
        return $this->container['signers_allowed_to_decline'];
    }

    /**
     * Sets signers_allowed_to_decline
     *
     * @param bool $signers_allowed_to_decline signers_allowed_to_decline
     *
     * @return self
     */
    public function setSignersAllowedToDecline($signers_allowed_to_decline)
    {
        if (is_null($signers_allowed_to_decline)) {
            throw new \InvalidArgumentException('non-nullable signers_allowed_to_decline cannot be null');
        }
        $this->container['signers_allowed_to_decline'] = $signers_allowed_to_decline;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return string|null
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string|null $workspace_id workspace_id
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {
        if (is_null($workspace_id)) {
            throw new \InvalidArgumentException('non-nullable workspace_id cannot be null');
        }
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets audit_trail_locale
     *
     * @return \OpenAPI\Client\Model\AuditTrailLocale
     */
    public function getAuditTrailLocale()
    {
        return $this->container['audit_trail_locale'];
    }

    /**
     * Sets audit_trail_locale
     *
     * @param \OpenAPI\Client\Model\AuditTrailLocale $audit_trail_locale audit_trail_locale
     *
     * @return self
     */
    public function setAuditTrailLocale($audit_trail_locale)
    {
        if (is_null($audit_trail_locale)) {
            throw new \InvalidArgumentException('non-nullable audit_trail_locale cannot be null');
        }
        $this->container['audit_trail_locale'] = $audit_trail_locale;

        return $this;
    }

    /**
     * Gets email_notification
     *
     * @return \OpenAPI\Client\Model\SignatureRequestEmailNotification
     */
    public function getEmailNotification()
    {
        return $this->container['email_notification'];
    }

    /**
     * Sets email_notification
     *
     * @param \OpenAPI\Client\Model\SignatureRequestEmailNotification $email_notification email_notification
     *
     * @return self
     */
    public function setEmailNotification($email_notification)
    {
        if (is_null($email_notification)) {
            throw new \InvalidArgumentException('non-nullable email_notification cannot be null');
        }
        $this->container['email_notification'] = $email_notification;

        return $this;
    }

    /**
     * Gets bulk_send_batch_id
     *
     * @return string
     */
    public function getBulkSendBatchId()
    {
        return $this->container['bulk_send_batch_id'];
    }

    /**
     * Sets bulk_send_batch_id
     *
     * @param string $bulk_send_batch_id bulk_send_batch_id
     *
     * @return self
     */
    public function setBulkSendBatchId($bulk_send_batch_id)
    {
        if (is_null($bulk_send_batch_id)) {
            array_push($this->openAPINullablesSetToNull, 'bulk_send_batch_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bulk_send_batch_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bulk_send_batch_id'] = $bulk_send_batch_id;

        return $this;
    }

    /**
     * Gets decline_information
     *
     * @return \OpenAPI\Client\Model\SignatureRequestDeclineInformation|null
     */
    public function getDeclineInformation()
    {
        return $this->container['decline_information'];
    }

    /**
     * Sets decline_information
     *
     * @param \OpenAPI\Client\Model\SignatureRequestDeclineInformation|null $decline_information decline_information
     *
     * @return self
     */
    public function setDeclineInformation($decline_information)
    {
        if (is_null($decline_information)) {
            array_push($this->openAPINullablesSetToNull, 'decline_information');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('decline_information', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['decline_information'] = $decline_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


