<?php
/**
 * CreateSignatureRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateSignatureRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateSignatureRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateSignatureRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'delivery_mode' => 'string',
        'ordered_signers' => 'bool',
        'ordered_approvers' => 'bool',
        'reminder_settings' => '\OpenAPI\Client\Model\CreateSignatureRequestReminderSettings',
        'timezone' => 'string',
        'email_custom_note' => 'string',
        'expiration_date' => '\DateTime',
        'template_id' => 'string',
        'external_id' => 'string',
        'branding_id' => 'string',
        'custom_experience_id' => 'string',
        'documents' => 'string[]',
        'signers' => '\OpenAPI\Client\Model\CreateSignatureRequestSignersInner[]',
        'workspace_id' => 'string',
        'audit_trail_locale' => '\OpenAPI\Client\Model\AuditTrailLocale',
        'signers_allowed_to_decline' => 'bool',
        'email_notification' => '\OpenAPI\Client\Model\SignatureRequestEmailNotification',
        'template_placeholders' => '\OpenAPI\Client\Model\CreateSignatureRequestTemplatePlaceholders',
        'archiving' => '\OpenAPI\Client\Model\Archiving',
        'labels' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'delivery_mode' => null,
        'ordered_signers' => null,
        'ordered_approvers' => null,
        'reminder_settings' => null,
        'timezone' => null,
        'email_custom_note' => null,
        'expiration_date' => 'date',
        'template_id' => 'uuid',
        'external_id' => null,
        'branding_id' => 'uuid',
        'custom_experience_id' => 'uuid',
        'documents' => 'uuid',
        'signers' => null,
        'workspace_id' => 'uuid',
        'audit_trail_locale' => null,
        'signers_allowed_to_decline' => null,
        'email_notification' => null,
        'template_placeholders' => null,
        'archiving' => null,
        'labels' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'delivery_mode' => false,
        'ordered_signers' => false,
        'ordered_approvers' => false,
        'reminder_settings' => true,
        'timezone' => false,
        'email_custom_note' => true,
        'expiration_date' => false,
        'template_id' => false,
        'external_id' => true,
        'branding_id' => true,
        'custom_experience_id' => true,
        'documents' => false,
        'signers' => false,
        'workspace_id' => true,
        'audit_trail_locale' => true,
        'signers_allowed_to_decline' => false,
        'email_notification' => true,
        'template_placeholders' => true,
        'archiving' => true,
        'labels' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'delivery_mode' => 'delivery_mode',
        'ordered_signers' => 'ordered_signers',
        'ordered_approvers' => 'ordered_approvers',
        'reminder_settings' => 'reminder_settings',
        'timezone' => 'timezone',
        'email_custom_note' => 'email_custom_note',
        'expiration_date' => 'expiration_date',
        'template_id' => 'template_id',
        'external_id' => 'external_id',
        'branding_id' => 'branding_id',
        'custom_experience_id' => 'custom_experience_id',
        'documents' => 'documents',
        'signers' => 'signers',
        'workspace_id' => 'workspace_id',
        'audit_trail_locale' => 'audit_trail_locale',
        'signers_allowed_to_decline' => 'signers_allowed_to_decline',
        'email_notification' => 'email_notification',
        'template_placeholders' => 'template_placeholders',
        'archiving' => 'archiving',
        'labels' => 'labels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'delivery_mode' => 'setDeliveryMode',
        'ordered_signers' => 'setOrderedSigners',
        'ordered_approvers' => 'setOrderedApprovers',
        'reminder_settings' => 'setReminderSettings',
        'timezone' => 'setTimezone',
        'email_custom_note' => 'setEmailCustomNote',
        'expiration_date' => 'setExpirationDate',
        'template_id' => 'setTemplateId',
        'external_id' => 'setExternalId',
        'branding_id' => 'setBrandingId',
        'custom_experience_id' => 'setCustomExperienceId',
        'documents' => 'setDocuments',
        'signers' => 'setSigners',
        'workspace_id' => 'setWorkspaceId',
        'audit_trail_locale' => 'setAuditTrailLocale',
        'signers_allowed_to_decline' => 'setSignersAllowedToDecline',
        'email_notification' => 'setEmailNotification',
        'template_placeholders' => 'setTemplatePlaceholders',
        'archiving' => 'setArchiving',
        'labels' => 'setLabels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'delivery_mode' => 'getDeliveryMode',
        'ordered_signers' => 'getOrderedSigners',
        'ordered_approvers' => 'getOrderedApprovers',
        'reminder_settings' => 'getReminderSettings',
        'timezone' => 'getTimezone',
        'email_custom_note' => 'getEmailCustomNote',
        'expiration_date' => 'getExpirationDate',
        'template_id' => 'getTemplateId',
        'external_id' => 'getExternalId',
        'branding_id' => 'getBrandingId',
        'custom_experience_id' => 'getCustomExperienceId',
        'documents' => 'getDocuments',
        'signers' => 'getSigners',
        'workspace_id' => 'getWorkspaceId',
        'audit_trail_locale' => 'getAuditTrailLocale',
        'signers_allowed_to_decline' => 'getSignersAllowedToDecline',
        'email_notification' => 'getEmailNotification',
        'template_placeholders' => 'getTemplatePlaceholders',
        'archiving' => 'getArchiving',
        'labels' => 'getLabels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DELIVERY_MODE_NONE = 'none';
    public const DELIVERY_MODE_EMAIL = 'email';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryModeAllowableValues()
    {
        return [
            self::DELIVERY_MODE_NONE,
            self::DELIVERY_MODE_EMAIL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('delivery_mode', $data ?? [], null);
        $this->setIfExists('ordered_signers', $data ?? [], null);
        $this->setIfExists('ordered_approvers', $data ?? [], null);
        $this->setIfExists('reminder_settings', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], 'Europe/Paris');
        $this->setIfExists('email_custom_note', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('branding_id', $data ?? [], null);
        $this->setIfExists('custom_experience_id', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('signers', $data ?? [], null);
        $this->setIfExists('workspace_id', $data ?? [], null);
        $this->setIfExists('audit_trail_locale', $data ?? [], null);
        $this->setIfExists('signers_allowed_to_decline', $data ?? [], false);
        $this->setIfExists('email_notification', $data ?? [], null);
        $this->setIfExists('template_placeholders', $data ?? [], null);
        $this->setIfExists('archiving', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 128)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['delivery_mode'] === null) {
            $invalidProperties[] = "'delivery_mode' can't be null";
        }
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!is_null($this->container['delivery_mode']) && !in_array($this->container['delivery_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_mode', must be one of '%s'",
                $this->container['delivery_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['email_custom_note']) && (mb_strlen($this->container['email_custom_note']) > 500)) {
            $invalidProperties[] = "invalid value for 'email_custom_note', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['expiration_date']) && !preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", $this->container['expiration_date'])) {
            $invalidProperties[] = "invalid value for 'expiration_date', must be conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_id']) && !preg_match("/^[\\w\\-@.%+]+$/", $this->container['external_id'])) {
            $invalidProperties[] = "invalid value for 'external_id', must be conform to the pattern /^[\\w\\-@.%+]+$/.";
        }

        if (!is_null($this->container['documents']) && (count($this->container['documents']) > 5)) {
            $invalidProperties[] = "invalid value for 'documents', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['labels']) && (count($this->container['labels']) > 50)) {
            $invalidProperties[] = "invalid value for 'labels', number of items must be less than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the signature request
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateSignatureRequest., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateSignatureRequest., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets delivery_mode
     *
     * @return string
     */
    public function getDeliveryMode()
    {
        return $this->container['delivery_mode'];
    }

    /**
     * Sets delivery_mode
     *
     * @param string $delivery_mode Delivery mode to notify signers.
     *
     * @return self
     */
    public function setDeliveryMode($delivery_mode)
    {
        if (is_null($delivery_mode)) {
            throw new \InvalidArgumentException('non-nullable delivery_mode cannot be null');
        }
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!in_array($delivery_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_mode', must be one of '%s'",
                    $delivery_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_mode'] = $delivery_mode;

        return $this;
    }

    /**
     * Gets ordered_signers
     *
     * @return bool|null
     */
    public function getOrderedSigners()
    {
        return $this->container['ordered_signers'];
    }

    /**
     * Sets ordered_signers
     *
     * @param bool|null $ordered_signers Enable an ordered workflow, each signer will be requested to sign in a sequential order
     *
     * @return self
     */
    public function setOrderedSigners($ordered_signers)
    {
        if (is_null($ordered_signers)) {
            throw new \InvalidArgumentException('non-nullable ordered_signers cannot be null');
        }
        $this->container['ordered_signers'] = $ordered_signers;

        return $this;
    }

    /**
     * Gets ordered_approvers
     *
     * @return bool|null
     */
    public function getOrderedApprovers()
    {
        return $this->container['ordered_approvers'];
    }

    /**
     * Sets ordered_approvers
     *
     * @param bool|null $ordered_approvers When enabled, Approvers are requested to approve sequentially. Each Approver will be invited to approve only once the previous one has completed their approval.
     *
     * @return self
     */
    public function setOrderedApprovers($ordered_approvers)
    {
        if (is_null($ordered_approvers)) {
            throw new \InvalidArgumentException('non-nullable ordered_approvers cannot be null');
        }
        $this->container['ordered_approvers'] = $ordered_approvers;

        return $this;
    }

    /**
     * Gets reminder_settings
     *
     * @return \OpenAPI\Client\Model\CreateSignatureRequestReminderSettings|null
     */
    public function getReminderSettings()
    {
        return $this->container['reminder_settings'];
    }

    /**
     * Sets reminder_settings
     *
     * @param \OpenAPI\Client\Model\CreateSignatureRequestReminderSettings|null $reminder_settings reminder_settings
     *
     * @return self
     */
    public function setReminderSettings($reminder_settings)
    {
        if (is_null($reminder_settings)) {
            array_push($this->openAPINullablesSetToNull, 'reminder_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reminder_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reminder_settings'] = $reminder_settings;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Time zone of the dates and times displayed in emails, the Signature Request expiration date, and the PDF Audit Trail. Format: tz database. Default is set to Europe/Paris.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets email_custom_note
     *
     * @return string|null
     * @deprecated
     */
    public function getEmailCustomNote()
    {
        return $this->container['email_custom_note'];
    }

    /**
     * Sets email_custom_note
     *
     * @param string|null $email_custom_note A custom note added to emails sent to signers.
     *
     * @return self
     * @deprecated
     */
    public function setEmailCustomNote($email_custom_note)
    {
        if (is_null($email_custom_note)) {
            array_push($this->openAPINullablesSetToNull, 'email_custom_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_custom_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email_custom_note) && (mb_strlen($email_custom_note) > 500)) {
            throw new \InvalidArgumentException('invalid length for $email_custom_note when calling CreateSignatureRequest., must be smaller than or equal to 500.');
        }

        $this->container['email_custom_note'] = $email_custom_note;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Due date of the Signature Request (yyyy-mm-dd). Defaults to 6 months after initiation. The date cannot be in the past and cannot be more than one year after initiation.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }

        if ((!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", ObjectSerializer::toString($expiration_date)))) {
            throw new \InvalidArgumentException("invalid value for \$expiration_date when calling CreateSignatureRequest., must conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.");
        }

        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string|null $template_id Create a signature request from an existing template.
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            throw new \InvalidArgumentException('non-nullable template_id cannot be null');
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Store a custom id that will be added to webhooks & appended to redirect urls.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_id) && (mb_strlen($external_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling CreateSignatureRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($external_id) && (!preg_match("/^[\\w\\-@.%+]+$/", ObjectSerializer::toString($external_id)))) {
            throw new \InvalidArgumentException("invalid value for \$external_id when calling CreateSignatureRequest., must conform to the pattern /^[\\w\\-@.%+]+$/.");
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets branding_id
     *
     * @return string|null
     * @deprecated
     */
    public function getBrandingId()
    {
        return $this->container['branding_id'];
    }

    /**
     * Sets branding_id
     *
     * @param string|null $branding_id Use a specific branding to customize the signature experience.
     *
     * @return self
     * @deprecated
     */
    public function setBrandingId($branding_id)
    {
        if (is_null($branding_id)) {
            array_push($this->openAPINullablesSetToNull, 'branding_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branding_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['branding_id'] = $branding_id;

        return $this;
    }

    /**
     * Gets custom_experience_id
     *
     * @return string|null
     */
    public function getCustomExperienceId()
    {
        return $this->container['custom_experience_id'];
    }

    /**
     * Sets custom_experience_id
     *
     * @param string|null $custom_experience_id Use a specific Custom Experience to customize the signature experience.
     *
     * @return self
     */
    public function setCustomExperienceId($custom_experience_id)
    {
        if (is_null($custom_experience_id)) {
            array_push($this->openAPINullablesSetToNull, 'custom_experience_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_experience_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_experience_id'] = $custom_experience_id;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return string[]|null
     * @deprecated
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param string[]|null $documents You can directly attach orphan documents to the signature request.
     *
     * @return self
     * @deprecated
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }

        if ((count($documents) > 5)) {
            throw new \InvalidArgumentException('invalid value for $documents when calling CreateSignatureRequest., number of items must be less than or equal to 5.');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets signers
     *
     * @return \OpenAPI\Client\Model\CreateSignatureRequestSignersInner[]|null
     * @deprecated
     */
    public function getSigners()
    {
        return $this->container['signers'];
    }

    /**
     * Sets signers
     *
     * @param \OpenAPI\Client\Model\CreateSignatureRequestSignersInner[]|null $signers Can only be used if you add documents at the same time.
     *
     * @return self
     * @deprecated
     */
    public function setSigners($signers)
    {
        if (is_null($signers)) {
            throw new \InvalidArgumentException('non-nullable signers cannot be null');
        }
        $this->container['signers'] = $signers;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return string|null
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string|null $workspace_id Scope the signature request to a specific workspace. If template_id is filled and Template is already linked to a Workspace, keep this field to null ; the created Signature Request will be scoped to Template's Workspace.
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {
        if (is_null($workspace_id)) {
            array_push($this->openAPINullablesSetToNull, 'workspace_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workspace_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets audit_trail_locale
     *
     * @return \OpenAPI\Client\Model\AuditTrailLocale|null
     */
    public function getAuditTrailLocale()
    {
        return $this->container['audit_trail_locale'];
    }

    /**
     * Sets audit_trail_locale
     *
     * @param \OpenAPI\Client\Model\AuditTrailLocale|null $audit_trail_locale Define the locale for the generated audit trail.
     *
     * @return self
     */
    public function setAuditTrailLocale($audit_trail_locale)
    {
        if (is_null($audit_trail_locale)) {
            array_push($this->openAPINullablesSetToNull, 'audit_trail_locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('audit_trail_locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['audit_trail_locale'] = $audit_trail_locale;

        return $this;
    }

    /**
     * Gets signers_allowed_to_decline
     *
     * @return bool|null
     */
    public function getSignersAllowedToDecline()
    {
        return $this->container['signers_allowed_to_decline'];
    }

    /**
     * Sets signers_allowed_to_decline
     *
     * @param bool|null $signers_allowed_to_decline Allowing signers to decline to sign.
     *
     * @return self
     */
    public function setSignersAllowedToDecline($signers_allowed_to_decline)
    {
        if (is_null($signers_allowed_to_decline)) {
            throw new \InvalidArgumentException('non-nullable signers_allowed_to_decline cannot be null');
        }
        $this->container['signers_allowed_to_decline'] = $signers_allowed_to_decline;

        return $this;
    }

    /**
     * Gets email_notification
     *
     * @return \OpenAPI\Client\Model\SignatureRequestEmailNotification|null
     */
    public function getEmailNotification()
    {
        return $this->container['email_notification'];
    }

    /**
     * Sets email_notification
     *
     * @param \OpenAPI\Client\Model\SignatureRequestEmailNotification|null $email_notification email_notification
     *
     * @return self
     */
    public function setEmailNotification($email_notification)
    {
        if (is_null($email_notification)) {
            array_push($this->openAPINullablesSetToNull, 'email_notification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_notification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_notification'] = $email_notification;

        return $this;
    }

    /**
     * Gets template_placeholders
     *
     * @return \OpenAPI\Client\Model\CreateSignatureRequestTemplatePlaceholders|null
     */
    public function getTemplatePlaceholders()
    {
        return $this->container['template_placeholders'];
    }

    /**
     * Sets template_placeholders
     *
     * @param \OpenAPI\Client\Model\CreateSignatureRequestTemplatePlaceholders|null $template_placeholders template_placeholders
     *
     * @return self
     */
    public function setTemplatePlaceholders($template_placeholders)
    {
        if (is_null($template_placeholders)) {
            array_push($this->openAPINullablesSetToNull, 'template_placeholders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_placeholders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_placeholders'] = $template_placeholders;

        return $this;
    }

    /**
     * Gets archiving
     *
     * @return \OpenAPI\Client\Model\Archiving|null
     * @deprecated
     */
    public function getArchiving()
    {
        return $this->container['archiving'];
    }

    /**
     * Sets archiving
     *
     * @param \OpenAPI\Client\Model\Archiving|null $archiving archiving
     *
     * @return self
     * @deprecated
     */
    public function setArchiving($archiving)
    {
        if (is_null($archiving)) {
            array_push($this->openAPINullablesSetToNull, 'archiving');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('archiving', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['archiving'] = $archiving;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels List of Labels to associate with the Signature Request. Labels are identified by their ID.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }

        if ((count($labels) > 50)) {
            throw new \InvalidArgumentException('invalid value for $labels when calling CreateSignatureRequest., number of items must be less than or equal to 50.');
        }
        $this->container['labels'] = $labels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


