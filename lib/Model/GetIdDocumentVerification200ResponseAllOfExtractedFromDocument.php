<?php
/**
 * GetIdDocumentVerification200ResponseAllOfExtractedFromDocument
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetIdDocumentVerification200ResponseAllOfExtractedFromDocument Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetIdDocumentVerification200ResponseAllOfExtractedFromDocument implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_id_document_verification_200_response_allOf_extracted_from_document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'birth_name' => 'string',
        'last_name' => 'string',
        'birth_date' => '\DateTime',
        'birth_place' => 'string',
        'gender' => 'string',
        'postal_address' => 'string',
        'document_type' => 'string',
        'document_issuing_country' => 'string',
        'document_issuing_date' => '\DateTime',
        'document_expiration_date' => '\DateTime',
        'document_number' => 'string',
        'mrz' => '\OpenAPI\Client\Model\GetIdDocumentVerification200ResponseAllOfExtractedFromDocumentMrz'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'birth_name' => null,
        'last_name' => null,
        'birth_date' => 'date',
        'birth_place' => null,
        'gender' => null,
        'postal_address' => null,
        'document_type' => null,
        'document_issuing_country' => 'ISO 3166-1 alpha-2',
        'document_issuing_date' => 'date',
        'document_expiration_date' => 'date',
        'document_number' => null,
        'mrz' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_name' => true,
        'birth_name' => true,
        'last_name' => true,
        'birth_date' => true,
        'birth_place' => true,
        'gender' => true,
        'postal_address' => true,
        'document_type' => true,
        'document_issuing_country' => true,
        'document_issuing_date' => true,
        'document_expiration_date' => true,
        'document_number' => true,
        'mrz' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'first_name',
        'birth_name' => 'birth_name',
        'last_name' => 'last_name',
        'birth_date' => 'birth_date',
        'birth_place' => 'birth_place',
        'gender' => 'gender',
        'postal_address' => 'postal_address',
        'document_type' => 'document_type',
        'document_issuing_country' => 'document_issuing_country',
        'document_issuing_date' => 'document_issuing_date',
        'document_expiration_date' => 'document_expiration_date',
        'document_number' => 'document_number',
        'mrz' => 'mrz'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'birth_name' => 'setBirthName',
        'last_name' => 'setLastName',
        'birth_date' => 'setBirthDate',
        'birth_place' => 'setBirthPlace',
        'gender' => 'setGender',
        'postal_address' => 'setPostalAddress',
        'document_type' => 'setDocumentType',
        'document_issuing_country' => 'setDocumentIssuingCountry',
        'document_issuing_date' => 'setDocumentIssuingDate',
        'document_expiration_date' => 'setDocumentExpirationDate',
        'document_number' => 'setDocumentNumber',
        'mrz' => 'setMrz'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'birth_name' => 'getBirthName',
        'last_name' => 'getLastName',
        'birth_date' => 'getBirthDate',
        'birth_place' => 'getBirthPlace',
        'gender' => 'getGender',
        'postal_address' => 'getPostalAddress',
        'document_type' => 'getDocumentType',
        'document_issuing_country' => 'getDocumentIssuingCountry',
        'document_issuing_date' => 'getDocumentIssuingDate',
        'document_expiration_date' => 'getDocumentExpirationDate',
        'document_number' => 'getDocumentNumber',
        'mrz' => 'getMrz'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GENDER_F = 'f';
    public const GENDER_M = 'm';
    public const GENDER_X = 'x';
    public const DOCUMENT_TYPE_ID_CARD = 'id_card';
    public const DOCUMENT_TYPE_PASSPORT = 'passport';
    public const DOCUMENT_TYPE_RESIDENCE_PERMIT = 'residence_permit';
    public const DOCUMENT_TYPE_DRIVER_LICENSE = 'driver_license';
    public const DOCUMENT_TYPE_ITA_TS_CNS = 'ita_ts_cns';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_F,
            self::GENDER_M,
            self::GENDER_X,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_ID_CARD,
            self::DOCUMENT_TYPE_PASSPORT,
            self::DOCUMENT_TYPE_RESIDENCE_PERMIT,
            self::DOCUMENT_TYPE_DRIVER_LICENSE,
            self::DOCUMENT_TYPE_ITA_TS_CNS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('birth_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('birth_place', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('postal_address', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('document_issuing_country', $data ?? [], null);
        $this->setIfExists('document_issuing_date', $data ?? [], null);
        $this->setIfExists('document_expiration_date', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('mrz', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['birth_name'] === null) {
            $invalidProperties[] = "'birth_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['birth_date'] === null) {
            $invalidProperties[] = "'birth_date' can't be null";
        }
        if (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", $this->container['birth_date'])) {
            $invalidProperties[] = "invalid value for 'birth_date', must be conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.";
        }

        if ($this->container['birth_place'] === null) {
            $invalidProperties[] = "'birth_place' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['postal_address'] === null) {
            $invalidProperties[] = "'postal_address' can't be null";
        }
        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_type', must be one of '%s'",
                $this->container['document_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['document_issuing_country'] === null) {
            $invalidProperties[] = "'document_issuing_country' can't be null";
        }
        if (!preg_match("/^[A-Za-z]{2}$/", $this->container['document_issuing_country'])) {
            $invalidProperties[] = "invalid value for 'document_issuing_country', must be conform to the pattern /^[A-Za-z]{2}$/.";
        }

        if ($this->container['document_issuing_date'] === null) {
            $invalidProperties[] = "'document_issuing_date' can't be null";
        }
        if (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", $this->container['document_issuing_date'])) {
            $invalidProperties[] = "invalid value for 'document_issuing_date', must be conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.";
        }

        if ($this->container['document_expiration_date'] === null) {
            $invalidProperties[] = "'document_expiration_date' can't be null";
        }
        if (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", $this->container['document_expiration_date'])) {
            $invalidProperties[] = "invalid value for 'document_expiration_date', must be conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.";
        }

        if ($this->container['document_number'] === null) {
            $invalidProperties[] = "'document_number' can't be null";
        }
        if ($this->container['mrz'] === null) {
            $invalidProperties[] = "'mrz' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The holder first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets birth_name
     *
     * @return string
     */
    public function getBirthName()
    {
        return $this->container['birth_name'];
    }

    /**
     * Sets birth_name
     *
     * @param string $birth_name The holder birth name
     *
     * @return self
     */
    public function setBirthName($birth_name)
    {
        if (is_null($birth_name)) {
            array_push($this->openAPINullablesSetToNull, 'birth_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_name'] = $birth_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The holder last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date Birth date on the document
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            array_push($this->openAPINullablesSetToNull, 'birth_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($birth_date) && (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", ObjectSerializer::toString($birth_date)))) {
            throw new \InvalidArgumentException("invalid value for \$birth_date when calling GetIdDocumentVerification200ResponseAllOfExtractedFromDocument., must conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.");
        }

        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets birth_place
     *
     * @return string
     */
    public function getBirthPlace()
    {
        return $this->container['birth_place'];
    }

    /**
     * Sets birth_place
     *
     * @param string $birth_place The holder birth place
     *
     * @return self
     */
    public function setBirthPlace($birth_place)
    {
        if (is_null($birth_place)) {
            array_push($this->openAPINullablesSetToNull, 'birth_place');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_place', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_place'] = $birth_place;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender The holder gender. \"m\" Masculine, \"f\" Feminine, \"x\" Non defined.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return string
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param string $postal_address The holder postal address
     *
     * @return self
     */
    public function setPostalAddress($postal_address)
    {
        if (is_null($postal_address)) {
            array_push($this->openAPINullablesSetToNull, 'postal_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type The document type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            array_push($this->openAPINullablesSetToNull, 'document_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_type', must be one of '%s'",
                    $document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_issuing_country
     *
     * @return string
     */
    public function getDocumentIssuingCountry()
    {
        return $this->container['document_issuing_country'];
    }

    /**
     * Sets document_issuing_country
     *
     * @param string $document_issuing_country Issuance country code (2 upper case letters)
     *
     * @return self
     */
    public function setDocumentIssuingCountry($document_issuing_country)
    {
        if (is_null($document_issuing_country)) {
            array_push($this->openAPINullablesSetToNull, 'document_issuing_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_issuing_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($document_issuing_country) && (!preg_match("/^[A-Za-z]{2}$/", ObjectSerializer::toString($document_issuing_country)))) {
            throw new \InvalidArgumentException("invalid value for \$document_issuing_country when calling GetIdDocumentVerification200ResponseAllOfExtractedFromDocument., must conform to the pattern /^[A-Za-z]{2}$/.");
        }

        $this->container['document_issuing_country'] = $document_issuing_country;

        return $this;
    }

    /**
     * Gets document_issuing_date
     *
     * @return \DateTime
     */
    public function getDocumentIssuingDate()
    {
        return $this->container['document_issuing_date'];
    }

    /**
     * Sets document_issuing_date
     *
     * @param \DateTime $document_issuing_date Document issuance date
     *
     * @return self
     */
    public function setDocumentIssuingDate($document_issuing_date)
    {
        if (is_null($document_issuing_date)) {
            array_push($this->openAPINullablesSetToNull, 'document_issuing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_issuing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($document_issuing_date) && (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", ObjectSerializer::toString($document_issuing_date)))) {
            throw new \InvalidArgumentException("invalid value for \$document_issuing_date when calling GetIdDocumentVerification200ResponseAllOfExtractedFromDocument., must conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.");
        }

        $this->container['document_issuing_date'] = $document_issuing_date;

        return $this;
    }

    /**
     * Gets document_expiration_date
     *
     * @return \DateTime
     */
    public function getDocumentExpirationDate()
    {
        return $this->container['document_expiration_date'];
    }

    /**
     * Sets document_expiration_date
     *
     * @param \DateTime $document_expiration_date Document legal expiration date
     *
     * @return self
     */
    public function setDocumentExpirationDate($document_expiration_date)
    {
        if (is_null($document_expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'document_expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($document_expiration_date) && (!preg_match("/^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/", ObjectSerializer::toString($document_expiration_date)))) {
            throw new \InvalidArgumentException("invalid value for \$document_expiration_date when calling GetIdDocumentVerification200ResponseAllOfExtractedFromDocument., must conform to the pattern /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.");
        }

        $this->container['document_expiration_date'] = $document_expiration_date;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number Document identifier number (may contain letters)
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {
        if (is_null($document_number)) {
            array_push($this->openAPINullablesSetToNull, 'document_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets mrz
     *
     * @return \OpenAPI\Client\Model\GetIdDocumentVerification200ResponseAllOfExtractedFromDocumentMrz
     */
    public function getMrz()
    {
        return $this->container['mrz'];
    }

    /**
     * Sets mrz
     *
     * @param \OpenAPI\Client\Model\GetIdDocumentVerification200ResponseAllOfExtractedFromDocumentMrz $mrz mrz
     *
     * @return self
     */
    public function setMrz($mrz)
    {
        if (is_null($mrz)) {
            throw new \InvalidArgumentException('non-nullable mrz cannot be null');
        }
        $this->container['mrz'] = $mrz;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


