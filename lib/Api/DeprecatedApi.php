<?php
/**
 * DeprecatedApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Api v3
 *
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DeprecatedApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeprecatedApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createIdDocumentVerification' => [
            'multipart/form-data',
        ],
        'getBankAccountVerifications' => [
            'application/json',
        ],
        'getBankAccountVerificationsBankAccountVerificationId' => [
            'application/json',
        ],
        'getIdDocumentVerification' => [
            'application/json',
        ],
        'getIdDocumentVerifications' => [
            'application/json',
        ],
        'postBankAccountVerifications' => [
            'multipart/form-data',
        ],
        'postDocuments' => [
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createIdDocumentVerification
     *
     * [DEPRECATED] Initiate a new ID document verification
     *
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the ID document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the ID document birth name. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $document_type The document type to verify (optional)
     * @param  \SplFileObject|null $file Binary file (optional)
     * @param  \SplFileObject|null $additional_file Binary file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LegacyIdDocumentVerificationCreated|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\UnsupportedMediaTypeResponse|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError
     * @deprecated
     */
    public function createIdDocumentVerification($first_name = null, $last_name = null, $document_type = null, $file = null, $additional_file = null, string $contentType = self::contentTypes['createIdDocumentVerification'][0])
    {
        list($response) = $this->createIdDocumentVerificationWithHttpInfo($first_name, $last_name, $document_type, $file, $additional_file, $contentType);
        return $response;
    }

    /**
     * Operation createIdDocumentVerificationWithHttpInfo
     *
     * [DEPRECATED] Initiate a new ID document verification
     *
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the ID document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the ID document birth name. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $document_type The document type to verify (optional)
     * @param  \SplFileObject|null $file Binary file (optional)
     * @param  \SplFileObject|null $additional_file Binary file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LegacyIdDocumentVerificationCreated|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\UnsupportedMediaTypeResponse|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createIdDocumentVerificationWithHttpInfo($first_name = null, $last_name = null, $document_type = null, $file = null, $additional_file = null, string $contentType = self::contentTypes['createIdDocumentVerification'][0])
    {
        $request = $this->createIdDocumentVerificationRequest($first_name, $last_name, $document_type, $file, $additional_file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\LegacyIdDocumentVerificationCreated',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnsupportedMediaTypeResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InternalServerError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\LegacyIdDocumentVerificationCreated',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LegacyIdDocumentVerificationCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnsupportedMediaTypeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createIdDocumentVerificationAsync
     *
     * [DEPRECATED] Initiate a new ID document verification
     *
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the ID document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the ID document birth name. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $document_type The document type to verify (optional)
     * @param  \SplFileObject|null $file Binary file (optional)
     * @param  \SplFileObject|null $additional_file Binary file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createIdDocumentVerificationAsync($first_name = null, $last_name = null, $document_type = null, $file = null, $additional_file = null, string $contentType = self::contentTypes['createIdDocumentVerification'][0])
    {
        return $this->createIdDocumentVerificationAsyncWithHttpInfo($first_name, $last_name, $document_type, $file, $additional_file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createIdDocumentVerificationAsyncWithHttpInfo
     *
     * [DEPRECATED] Initiate a new ID document verification
     *
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the ID document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the ID document birth name. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $document_type The document type to verify (optional)
     * @param  \SplFileObject|null $file Binary file (optional)
     * @param  \SplFileObject|null $additional_file Binary file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createIdDocumentVerificationAsyncWithHttpInfo($first_name = null, $last_name = null, $document_type = null, $file = null, $additional_file = null, string $contentType = self::contentTypes['createIdDocumentVerification'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LegacyIdDocumentVerificationCreated';
        $request = $this->createIdDocumentVerificationRequest($first_name, $last_name, $document_type, $file, $additional_file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createIdDocumentVerification'
     *
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the ID document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the ID document birth name. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. (optional)
     * @param  string|null $document_type The document type to verify (optional)
     * @param  \SplFileObject|null $file Binary file (optional)
     * @param  \SplFileObject|null $additional_file Binary file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createIdDocumentVerificationRequest($first_name = null, $last_name = null, $document_type = null, $file = null, $additional_file = null, string $contentType = self::contentTypes['createIdDocumentVerification'][0])
    {

        if ($first_name !== null && strlen($first_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling DeprecatedApi.createIdDocumentVerification, must be smaller than or equal to 255.');
        }
        if ($first_name !== null && strlen($first_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling DeprecatedApi.createIdDocumentVerification, must be bigger than or equal to 1.');
        }
        
        if ($last_name !== null && strlen($last_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$last_name" when calling DeprecatedApi.createIdDocumentVerification, must be smaller than or equal to 255.');
        }
        if ($last_name !== null && strlen($last_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$last_name" when calling DeprecatedApi.createIdDocumentVerification, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/id_document_verifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'first_name' => $first_name,
            'last_name' => $last_name,
            'document_type' => $document_type,
            'file' => $file,
            'additional_file' => $additional_file,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBankAccountVerifications
     *
     * [DEPRECATED] List Bank Account Verifications
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetBankAccountVerifications200Response|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError
     * @deprecated
     */
    public function getBankAccountVerifications($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getBankAccountVerifications'][0])
    {
        list($response) = $this->getBankAccountVerificationsWithHttpInfo($after, $limit, $status, $contentType);
        return $response;
    }

    /**
     * Operation getBankAccountVerificationsWithHttpInfo
     *
     * [DEPRECATED] List Bank Account Verifications
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetBankAccountVerifications200Response|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getBankAccountVerificationsWithHttpInfo($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getBankAccountVerifications'][0])
    {
        $request = $this->getBankAccountVerificationsRequest($after, $limit, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetBankAccountVerifications200Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InternalServerError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetBankAccountVerifications200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetBankAccountVerifications200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getBankAccountVerificationsAsync
     *
     * [DEPRECATED] List Bank Account Verifications
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBankAccountVerificationsAsync($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getBankAccountVerifications'][0])
    {
        return $this->getBankAccountVerificationsAsyncWithHttpInfo($after, $limit, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBankAccountVerificationsAsyncWithHttpInfo
     *
     * [DEPRECATED] List Bank Account Verifications
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBankAccountVerificationsAsyncWithHttpInfo($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getBankAccountVerifications'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetBankAccountVerifications200Response';
        $request = $this->getBankAccountVerificationsRequest($after, $limit, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBankAccountVerifications'
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getBankAccountVerificationsRequest($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getBankAccountVerifications'][0])
    {

        if ($after !== null && strlen($after) < 1) {
            throw new \InvalidArgumentException('invalid length for "$after" when calling DeprecatedApi.getBankAccountVerifications, must be bigger than or equal to 1.');
        }
        
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeprecatedApi.getBankAccountVerifications, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeprecatedApi.getBankAccountVerifications, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/bank_account_verifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBankAccountVerificationsBankAccountVerificationId
     *
     * [DEPRECATED] Retrieve a bank account verification
     *
     * @param  string $bank_account_verification_id The bank account verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetBankAccountVerificationsBankAccountVerificationId200Response|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\NotFoundResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError
     * @deprecated
     */
    public function getBankAccountVerificationsBankAccountVerificationId($bank_account_verification_id, string $contentType = self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'][0])
    {
        list($response) = $this->getBankAccountVerificationsBankAccountVerificationIdWithHttpInfo($bank_account_verification_id, $contentType);
        return $response;
    }

    /**
     * Operation getBankAccountVerificationsBankAccountVerificationIdWithHttpInfo
     *
     * [DEPRECATED] Retrieve a bank account verification
     *
     * @param  string $bank_account_verification_id The bank account verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetBankAccountVerificationsBankAccountVerificationId200Response|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\NotFoundResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getBankAccountVerificationsBankAccountVerificationIdWithHttpInfo($bank_account_verification_id, string $contentType = self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'][0])
    {
        $request = $this->getBankAccountVerificationsBankAccountVerificationIdRequest($bank_account_verification_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetBankAccountVerificationsBankAccountVerificationId200Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\NotFoundResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InternalServerError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetBankAccountVerificationsBankAccountVerificationId200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetBankAccountVerificationsBankAccountVerificationId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getBankAccountVerificationsBankAccountVerificationIdAsync
     *
     * [DEPRECATED] Retrieve a bank account verification
     *
     * @param  string $bank_account_verification_id The bank account verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBankAccountVerificationsBankAccountVerificationIdAsync($bank_account_verification_id, string $contentType = self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'][0])
    {
        return $this->getBankAccountVerificationsBankAccountVerificationIdAsyncWithHttpInfo($bank_account_verification_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBankAccountVerificationsBankAccountVerificationIdAsyncWithHttpInfo
     *
     * [DEPRECATED] Retrieve a bank account verification
     *
     * @param  string $bank_account_verification_id The bank account verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBankAccountVerificationsBankAccountVerificationIdAsyncWithHttpInfo($bank_account_verification_id, string $contentType = self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetBankAccountVerificationsBankAccountVerificationId200Response';
        $request = $this->getBankAccountVerificationsBankAccountVerificationIdRequest($bank_account_verification_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBankAccountVerificationsBankAccountVerificationId'
     *
     * @param  string $bank_account_verification_id The bank account verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getBankAccountVerificationsBankAccountVerificationIdRequest($bank_account_verification_id, string $contentType = self::contentTypes['getBankAccountVerificationsBankAccountVerificationId'][0])
    {

        // verify the required parameter 'bank_account_verification_id' is set
        if ($bank_account_verification_id === null || (is_array($bank_account_verification_id) && count($bank_account_verification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_verification_id when calling getBankAccountVerificationsBankAccountVerificationId'
            );
        }


        $resourcePath = '/bank_account_verifications/{bankAccountVerificationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bank_account_verification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountVerificationId' . '}',
                ObjectSerializer::toPathValue($bank_account_verification_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIdDocumentVerification
     *
     * [DEPRECATED] Retrieve an ID document verification
     *
     * @param  string $id_document_verification_id The ID document verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetIdDocumentVerification200Response|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\NotFoundResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError
     * @deprecated
     */
    public function getIdDocumentVerification($id_document_verification_id, string $contentType = self::contentTypes['getIdDocumentVerification'][0])
    {
        list($response) = $this->getIdDocumentVerificationWithHttpInfo($id_document_verification_id, $contentType);
        return $response;
    }

    /**
     * Operation getIdDocumentVerificationWithHttpInfo
     *
     * [DEPRECATED] Retrieve an ID document verification
     *
     * @param  string $id_document_verification_id The ID document verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetIdDocumentVerification200Response|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\NotFoundResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIdDocumentVerificationWithHttpInfo($id_document_verification_id, string $contentType = self::contentTypes['getIdDocumentVerification'][0])
    {
        $request = $this->getIdDocumentVerificationRequest($id_document_verification_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetIdDocumentVerification200Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\NotFoundResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InternalServerError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetIdDocumentVerification200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetIdDocumentVerification200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getIdDocumentVerificationAsync
     *
     * [DEPRECATED] Retrieve an ID document verification
     *
     * @param  string $id_document_verification_id The ID document verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIdDocumentVerificationAsync($id_document_verification_id, string $contentType = self::contentTypes['getIdDocumentVerification'][0])
    {
        return $this->getIdDocumentVerificationAsyncWithHttpInfo($id_document_verification_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIdDocumentVerificationAsyncWithHttpInfo
     *
     * [DEPRECATED] Retrieve an ID document verification
     *
     * @param  string $id_document_verification_id The ID document verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIdDocumentVerificationAsyncWithHttpInfo($id_document_verification_id, string $contentType = self::contentTypes['getIdDocumentVerification'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetIdDocumentVerification200Response';
        $request = $this->getIdDocumentVerificationRequest($id_document_verification_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIdDocumentVerification'
     *
     * @param  string $id_document_verification_id The ID document verification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIdDocumentVerificationRequest($id_document_verification_id, string $contentType = self::contentTypes['getIdDocumentVerification'][0])
    {

        // verify the required parameter 'id_document_verification_id' is set
        if ($id_document_verification_id === null || (is_array($id_document_verification_id) && count($id_document_verification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_document_verification_id when calling getIdDocumentVerification'
            );
        }


        $resourcePath = '/id_document_verifications/{idDocumentVerificationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_document_verification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'idDocumentVerificationId' . '}',
                ObjectSerializer::toPathValue($id_document_verification_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIdDocumentVerifications
     *
     * [DEPRECATED] List ID Document Verifications
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetIdDocumentVerifications200Response|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError
     * @deprecated
     */
    public function getIdDocumentVerifications($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getIdDocumentVerifications'][0])
    {
        list($response) = $this->getIdDocumentVerificationsWithHttpInfo($after, $limit, $status, $contentType);
        return $response;
    }

    /**
     * Operation getIdDocumentVerificationsWithHttpInfo
     *
     * [DEPRECATED] List ID Document Verifications
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetIdDocumentVerifications200Response|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIdDocumentVerificationsWithHttpInfo($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getIdDocumentVerifications'][0])
    {
        $request = $this->getIdDocumentVerificationsRequest($after, $limit, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetIdDocumentVerifications200Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InternalServerError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetIdDocumentVerifications200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetIdDocumentVerifications200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getIdDocumentVerificationsAsync
     *
     * [DEPRECATED] List ID Document Verifications
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIdDocumentVerificationsAsync($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getIdDocumentVerifications'][0])
    {
        return $this->getIdDocumentVerificationsAsyncWithHttpInfo($after, $limit, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIdDocumentVerificationsAsyncWithHttpInfo
     *
     * [DEPRECATED] List ID Document Verifications
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIdDocumentVerificationsAsyncWithHttpInfo($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getIdDocumentVerifications'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetIdDocumentVerifications200Response';
        $request = $this->getIdDocumentVerificationsRequest($after, $limit, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIdDocumentVerifications'
     *
     * @param  string|null $after After cursor (pagination) (optional)
     * @param  int|null $limit The limit of items count to retrieve. (optional, default to 100)
     * @param  string|null $status Filter by status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdDocumentVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIdDocumentVerificationsRequest($after = null, $limit = 100, $status = null, string $contentType = self::contentTypes['getIdDocumentVerifications'][0])
    {

        if ($after !== null && strlen($after) < 1) {
            throw new \InvalidArgumentException('invalid length for "$after" when calling DeprecatedApi.getIdDocumentVerifications, must be bigger than or equal to 1.');
        }
        
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeprecatedApi.getIdDocumentVerifications, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeprecatedApi.getIdDocumentVerifications, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/id_document_verifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBankAccountVerifications
     *
     * [DEPRECATED] Initiate a new Bank Account Verification
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $iban International Bank Account Number (IBAN) (optional)
     * @param  string|null $bic Business Identifier Codes (BIC) (optional)
     * @param  string|null $legal_entity_name Please provide the legal entity name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. The field can not be submitted if fields \\\&quot;first_name\\\&quot; and \\\&quot;last_name\\\&quot; are provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LegacyBankAccountVerificationCreated|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\UnsupportedMediaTypeResponse|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError
     * @deprecated
     */
    public function postBankAccountVerifications($file, $first_name = null, $last_name = null, $iban = null, $bic = null, $legal_entity_name = null, string $contentType = self::contentTypes['postBankAccountVerifications'][0])
    {
        list($response) = $this->postBankAccountVerificationsWithHttpInfo($file, $first_name, $last_name, $iban, $bic, $legal_entity_name, $contentType);
        return $response;
    }

    /**
     * Operation postBankAccountVerificationsWithHttpInfo
     *
     * [DEPRECATED] Initiate a new Bank Account Verification
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $iban International Bank Account Number (IBAN) (optional)
     * @param  string|null $bic Business Identifier Codes (BIC) (optional)
     * @param  string|null $legal_entity_name Please provide the legal entity name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. The field can not be submitted if fields \\\&quot;first_name\\\&quot; and \\\&quot;last_name\\\&quot; are provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LegacyBankAccountVerificationCreated|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\UnsupportedMediaTypeResponse|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function postBankAccountVerificationsWithHttpInfo($file, $first_name = null, $last_name = null, $iban = null, $bic = null, $legal_entity_name = null, string $contentType = self::contentTypes['postBankAccountVerifications'][0])
    {
        $request = $this->postBankAccountVerificationsRequest($file, $first_name, $last_name, $iban, $bic, $legal_entity_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\LegacyBankAccountVerificationCreated',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnsupportedMediaTypeResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InternalServerError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\LegacyBankAccountVerificationCreated',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LegacyBankAccountVerificationCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnsupportedMediaTypeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postBankAccountVerificationsAsync
     *
     * [DEPRECATED] Initiate a new Bank Account Verification
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $iban International Bank Account Number (IBAN) (optional)
     * @param  string|null $bic Business Identifier Codes (BIC) (optional)
     * @param  string|null $legal_entity_name Please provide the legal entity name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. The field can not be submitted if fields \\\&quot;first_name\\\&quot; and \\\&quot;last_name\\\&quot; are provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postBankAccountVerificationsAsync($file, $first_name = null, $last_name = null, $iban = null, $bic = null, $legal_entity_name = null, string $contentType = self::contentTypes['postBankAccountVerifications'][0])
    {
        return $this->postBankAccountVerificationsAsyncWithHttpInfo($file, $first_name, $last_name, $iban, $bic, $legal_entity_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBankAccountVerificationsAsyncWithHttpInfo
     *
     * [DEPRECATED] Initiate a new Bank Account Verification
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $iban International Bank Account Number (IBAN) (optional)
     * @param  string|null $bic Business Identifier Codes (BIC) (optional)
     * @param  string|null $legal_entity_name Please provide the legal entity name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. The field can not be submitted if fields \\\&quot;first_name\\\&quot; and \\\&quot;last_name\\\&quot; are provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postBankAccountVerificationsAsyncWithHttpInfo($file, $first_name = null, $last_name = null, $iban = null, $bic = null, $legal_entity_name = null, string $contentType = self::contentTypes['postBankAccountVerifications'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LegacyBankAccountVerificationCreated';
        $request = $this->postBankAccountVerificationsRequest($file, $first_name, $last_name, $iban, $bic, $legal_entity_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBankAccountVerifications'
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string|null $first_name Please provide the holder first name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $last_name Please provide the holder last name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name. The field can not be submitted if field \\\&quot;legal_entity_name\\\&quot; is provided. (optional)
     * @param  string|null $iban International Bank Account Number (IBAN) (optional)
     * @param  string|null $bic Business Identifier Codes (BIC) (optional)
     * @param  string|null $legal_entity_name Please provide the legal entity name, exactly as it appears on the bank account document. Please match it exactly, with the same characters, same case. The field can not be submitted if fields \\\&quot;first_name\\\&quot; and \\\&quot;last_name\\\&quot; are provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBankAccountVerifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function postBankAccountVerificationsRequest($file, $first_name = null, $last_name = null, $iban = null, $bic = null, $legal_entity_name = null, string $contentType = self::contentTypes['postBankAccountVerifications'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postBankAccountVerifications'
            );
        }

        if ($first_name !== null && strlen($first_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling DeprecatedApi.postBankAccountVerifications, must be smaller than or equal to 255.');
        }
        if ($first_name !== null && strlen($first_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling DeprecatedApi.postBankAccountVerifications, must be bigger than or equal to 1.');
        }
        
        if ($last_name !== null && strlen($last_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$last_name" when calling DeprecatedApi.postBankAccountVerifications, must be smaller than or equal to 255.');
        }
        if ($last_name !== null && strlen($last_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$last_name" when calling DeprecatedApi.postBankAccountVerifications, must be bigger than or equal to 1.');
        }
        
        if ($iban !== null && strlen($iban) > 34) {
            throw new \InvalidArgumentException('invalid length for "$iban" when calling DeprecatedApi.postBankAccountVerifications, must be smaller than or equal to 34.');
        }
        if ($iban !== null && strlen($iban) < 14) {
            throw new \InvalidArgumentException('invalid length for "$iban" when calling DeprecatedApi.postBankAccountVerifications, must be bigger than or equal to 14.');
        }
        if ($iban !== null && !preg_match("/^([A-Z]{2}[ \\-]?[0-9]{2})(?=(?:[ \\-]?[A-Z0-9]){9,30}$)((?:[ \\-]?[A-Z0-9]{3,5}){2,7})([ \\-]?[A-Z0-9]{1,3})?$/", $iban)) {
            throw new \InvalidArgumentException("invalid value for \"iban\" when calling DeprecatedApi.postBankAccountVerifications, must conform to the pattern /^([A-Z]{2}[ \\-]?[0-9]{2})(?=(?:[ \\-]?[A-Z0-9]){9,30}$)((?:[ \\-]?[A-Z0-9]{3,5}){2,7})([ \\-]?[A-Z0-9]{1,3})?$/.");
        }
        
        if ($bic !== null && strlen($bic) > 11) {
            throw new \InvalidArgumentException('invalid length for "$bic" when calling DeprecatedApi.postBankAccountVerifications, must be smaller than or equal to 11.');
        }
        if ($bic !== null && strlen($bic) < 8) {
            throw new \InvalidArgumentException('invalid length for "$bic" when calling DeprecatedApi.postBankAccountVerifications, must be bigger than or equal to 8.');
        }
        if ($bic !== null && !preg_match("/^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$/", $bic)) {
            throw new \InvalidArgumentException("invalid value for \"bic\" when calling DeprecatedApi.postBankAccountVerifications, must conform to the pattern /^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$/.");
        }
        
        if ($legal_entity_name !== null && strlen($legal_entity_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$legal_entity_name" when calling DeprecatedApi.postBankAccountVerifications, must be smaller than or equal to 255.');
        }
        if ($legal_entity_name !== null && strlen($legal_entity_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$legal_entity_name" when calling DeprecatedApi.postBankAccountVerifications, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/bank_account_verifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'first_name' => $first_name,
            'last_name' => $last_name,
            'file' => $file,
            'iban' => $iban,
            'bic' => $bic,
            'legal_entity_name' => $legal_entity_name,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDocuments
     *
     * [DEPRECATED] Upload a Document
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string $nature nature (required)
     * @param  string|null $insert_after_id Insert just after the position of the specified document id (optional)
     * @param  string|null $password password (optional)
     * @param  string|null $name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space. (optional)
     * @param  \OpenAPI\Client\Model\InitialsArea|null $initials initials (optional)
     * @param  bool|null $parse_anchors parse_anchors (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\UnsupportedMediaTypeResponse|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError
     * @deprecated
     */
    public function postDocuments($file, $nature, $insert_after_id = null, $password = null, $name = null, $initials = null, $parse_anchors = null, string $contentType = self::contentTypes['postDocuments'][0])
    {
        list($response) = $this->postDocumentsWithHttpInfo($file, $nature, $insert_after_id, $password, $name, $initials, $parse_anchors, $contentType);
        return $response;
    }

    /**
     * Operation postDocumentsWithHttpInfo
     *
     * [DEPRECATED] Upload a Document
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string $nature (required)
     * @param  string|null $insert_after_id Insert just after the position of the specified document id (optional)
     * @param  string|null $password (optional)
     * @param  string|null $name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space. (optional)
     * @param  \OpenAPI\Client\Model\InitialsArea|null $initials (optional)
     * @param  bool|null $parse_anchors (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document|\OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\UnauthorizedResponse|\OpenAPI\Client\Model\ForbiddenResponse|\OpenAPI\Client\Model\MethodNotAllowed|\OpenAPI\Client\Model\UnsupportedMediaTypeResponse|\OpenAPI\Client\Model\TooManyRequestsResponse|\OpenAPI\Client\Model\InternalServerError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function postDocumentsWithHttpInfo($file, $nature, $insert_after_id = null, $password = null, $name = null, $initials = null, $parse_anchors = null, string $contentType = self::contentTypes['postDocuments'][0])
    {
        $request = $this->postDocumentsRequest($file, $nature, $insert_after_id, $password, $name, $initials, $parse_anchors, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UnsupportedMediaTypeResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InternalServerError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MethodNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnsupportedMediaTypeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postDocumentsAsync
     *
     * [DEPRECATED] Upload a Document
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string $nature (required)
     * @param  string|null $insert_after_id Insert just after the position of the specified document id (optional)
     * @param  string|null $password (optional)
     * @param  string|null $name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space. (optional)
     * @param  \OpenAPI\Client\Model\InitialsArea|null $initials (optional)
     * @param  bool|null $parse_anchors (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postDocumentsAsync($file, $nature, $insert_after_id = null, $password = null, $name = null, $initials = null, $parse_anchors = null, string $contentType = self::contentTypes['postDocuments'][0])
    {
        return $this->postDocumentsAsyncWithHttpInfo($file, $nature, $insert_after_id, $password, $name, $initials, $parse_anchors, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDocumentsAsyncWithHttpInfo
     *
     * [DEPRECATED] Upload a Document
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string $nature (required)
     * @param  string|null $insert_after_id Insert just after the position of the specified document id (optional)
     * @param  string|null $password (optional)
     * @param  string|null $name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space. (optional)
     * @param  \OpenAPI\Client\Model\InitialsArea|null $initials (optional)
     * @param  bool|null $parse_anchors (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postDocumentsAsyncWithHttpInfo($file, $nature, $insert_after_id = null, $password = null, $name = null, $initials = null, $parse_anchors = null, string $contentType = self::contentTypes['postDocuments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Document';
        $request = $this->postDocumentsRequest($file, $nature, $insert_after_id, $password, $name, $initials, $parse_anchors, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDocuments'
     *
     * @param  \SplFileObject $file Binary file (required)
     * @param  string $nature (required)
     * @param  string|null $insert_after_id Insert just after the position of the specified document id (optional)
     * @param  string|null $password (optional)
     * @param  string|null $name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space. (optional)
     * @param  \OpenAPI\Client\Model\InitialsArea|null $initials (optional)
     * @param  bool|null $parse_anchors (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function postDocumentsRequest($file, $nature, $insert_after_id = null, $password = null, $name = null, $initials = null, $parse_anchors = null, string $contentType = self::contentTypes['postDocuments'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postDocuments'
            );
        }

        // verify the required parameter 'nature' is set
        if ($nature === null || (is_array($nature) && count($nature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nature when calling postDocuments'
            );
        }



        if ($name !== null && strlen($name) > 128) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling DeprecatedApi.postDocuments, must be smaller than or equal to 128.');
        }
        if ($name !== null && strlen($name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling DeprecatedApi.postDocuments, must be bigger than or equal to 1.');
        }
        if ($name !== null && !preg_match("/^(?!\\s)[^\/\\\\]+(?<!\\s)$/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling DeprecatedApi.postDocuments, must conform to the pattern /^(?!\\s)[^\/\\\\]+(?<!\\s)$/.");
        }
        



        $resourcePath = '/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'file' => $file,
            'nature' => $nature,
            'insert_after_id' => $insert_after_id,
            'password' => $password,
            'name' => $name,
            'initials' => $initials,
            'parse_anchors' => $parse_anchors,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
