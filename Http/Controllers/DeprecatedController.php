<?php declare(strict_types=1);

/**
 * Public Api v3
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use OpenAPI\Server\Api\DeprecatedApiInterface;

class DeprecatedController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly DeprecatedApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation createIdDocumentVerification
     *
     * [DEPRECATED] Initiate a new ID document verification.
     *
     * @deprecated
     */
    public function createIdDocumentVerification(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'firstName' => [
                    'min:1',
                    'max:255',
                    'string',
                ],
                'lastName' => [
                    'min:1',
                    'max:255',
                    'string',
                ],
                'documentType' => [
                ],
                'file' => [
                    'file',
                ],
                'additionalFile' => [
                    'file',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $firstName = $request->string('firstName')->value();

        $lastName = $request->string('lastName')->value();

        $documentType = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\LegacyCreateIdDocumentVerificationDocumentType::class);

        $file = $request->file('file');

        $additionalFile = $request->file('additionalFile');


        $apiResult = $this->api->createIdDocumentVerification($firstName, $lastName, $documentType, $file, $additionalFile);

        if ($apiResult instanceof \OpenAPI\Server\Model\LegacyIdDocumentVerificationCreated) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getBankAccountVerifications
     *
     * [DEPRECATED] List Bank Account Verifications.
     *
     * @deprecated
     */
    public function getBankAccountVerifications(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'after' => [
                    'min:1',
                    'string',
                ],
                'limit' => [
                    'gte:1',
                    'lte:100',
                    'integer',
                ],
                'status' => [
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $after = $request->string('after')->value();

        $limit = $request->integer('limit');

        $status = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\GetBankAccountVerificationsStatusParameter::class);


        $apiResult = $this->api->getBankAccountVerifications($after, $limit, $status);

        if ($apiResult instanceof \OpenAPI\Server\Model\GetBankAccountVerifications200Response) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getBankAccountVerificationsBankAccountVerificationId
     *
     * [DEPRECATED] Retrieve a bank account verification.
     *
     * @deprecated
     */
    public function getBankAccountVerificationsBankAccountVerificationId(Request $request, string $bankAccountVerificationId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'bankAccountVerificationId' => $bankAccountVerificationId,
                ],
                $request->all(),
            ),
            [
                'bankAccountVerificationId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $apiResult = $this->api->getBankAccountVerificationsBankAccountVerificationId($bankAccountVerificationId);

        if ($apiResult instanceof \OpenAPI\Server\Model\GetBankAccountVerificationsBankAccountVerificationId200Response) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getIdDocumentVerification
     *
     * [DEPRECATED] Retrieve an ID document verification.
     *
     * @deprecated
     */
    public function getIdDocumentVerification(Request $request, string $idDocumentVerificationId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'idDocumentVerificationId' => $idDocumentVerificationId,
                ],
                $request->all(),
            ),
            [
                'idDocumentVerificationId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $apiResult = $this->api->getIdDocumentVerification($idDocumentVerificationId);

        if ($apiResult instanceof \OpenAPI\Server\Model\GetIdDocumentVerification200Response) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getIdDocumentVerifications
     *
     * [DEPRECATED] List ID Document Verifications.
     *
     * @deprecated
     */
    public function getIdDocumentVerifications(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'after' => [
                    'min:1',
                    'string',
                ],
                'limit' => [
                    'gte:1',
                    'lte:100',
                    'integer',
                ],
                'status' => [
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $after = $request->string('after')->value();

        $limit = $request->integer('limit');

        $status = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\GetBankAccountVerificationsStatusParameter::class);


        $apiResult = $this->api->getIdDocumentVerifications($after, $limit, $status);

        if ($apiResult instanceof \OpenAPI\Server\Model\GetIdDocumentVerifications200Response) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postBankAccountVerifications
     *
     * [DEPRECATED] Initiate a new Bank Account Verification.
     *
     * @deprecated
     */
    public function postBankAccountVerifications(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'file' => [
                    'file',
                    'required',
                ],
                'firstName' => [
                    'min:1',
                    'max:255',
                    'string',
                ],
                'lastName' => [
                    'min:1',
                    'max:255',
                    'string',
                ],
                'iban' => [
                    'min:14',
                    'max:34',
                    'regex:/^([A-Z]{2}[ \\-]?[0-9]{2})(?=(?:[ \\-]?[A-Z0-9]){9,30}$)((?:[ \\-]?[A-Z0-9]{3,5}){2,7})([ \\-]?[A-Z0-9]{1,3})?$/',
                    'string',
                ],
                'bic' => [
                    'min:8',
                    'max:11',
                    'regex:/^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$/',
                    'string',
                ],
                'legalEntityName' => [
                    'min:1',
                    'max:255',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $file = $request->file('file');

        $firstName = $request->string('firstName')->value();

        $lastName = $request->string('lastName')->value();

        $iban = $request->string('iban')->value();

        $bic = $request->string('bic')->value();

        $legalEntityName = $request->string('legalEntityName')->value();


        $apiResult = $this->api->postBankAccountVerifications($file, $firstName, $lastName, $iban, $bic, $legalEntityName);

        if ($apiResult instanceof \OpenAPI\Server\Model\LegacyBankAccountVerificationCreated) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postDocuments
     *
     * [DEPRECATED] Upload a Document.
     *
     * @deprecated
     */
    public function postDocuments(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'file' => [
                    'file',
                    'required',
                ],
                'nature' => [
                    'required',
                ],
                'insertAfterId' => [
                    'string',
                ],
                'password' => [
                    'string',
                ],
                'name' => [
                    'min:1',
                    'max:128',
                    'regex:/^(?!\\s)[^\/\\\\]+(?<!\\s)$/',
                    'string',
                ],
                'initials' => [
                ],
                'parseAnchors' => [
                    'boolean',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $file = $request->file('file');

        $nature = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\CreateDocumentFromMultipartNature::class);

        $insertAfterId = $request->string('insertAfterId')->value();

        $password = $request->string('password')->value();

        $name = $request->string('name')->value();

        $initials = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\InitialsArea::class);

        $parseAnchors = $request->boolean('parseAnchors');


        $apiResult = $this->api->postDocuments($file, $nature, $insertAfterId, $password, $name, $initials, $parseAnchors);

        if ($apiResult instanceof \OpenAPI\Server\Model\Document) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
