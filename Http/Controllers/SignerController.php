<?php declare(strict_types=1);

/**
 * Public Api v3
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use OpenAPI\Server\Api\SignerApiInterface;

class SignerController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly SignerApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdSignersSignerId
     *
     * Delete a Signer.
     *
     */
    public function deleteSignatureRequestsSignatureRequestIdSignersSignerId(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'signerId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->deleteSignatureRequestsSignatureRequestIdSignersSignerId($signatureRequestId, $signerId);

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent204) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 204);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSignatureRequestsSignatureRequestIdSigners
     *
     * List Signature Request's Signers.
     *
     */
    public function getSignatureRequestsSignatureRequestIdSigners(Request $request, string $signatureRequestId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $apiResult = $this->api->getSignatureRequestsSignatureRequestIdSigners($signatureRequestId);

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSignersSignersId
     *
     * Get a Signer.
     *
     */
    public function getSignersSignersId(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'signerId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->getSignersSignersId($signatureRequestId, $signerId);

        if ($apiResult instanceof \OpenAPI\Server\Model\Signer) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation patchSignatureRequestsSignatureRequestIdSignersSignerId
     *
     * Update a Signer.
     *
     */
    public function patchSignatureRequestsSignatureRequestIdSignersSignerId(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $updateSigner = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\UpdateSigner::class);


        $apiResult = $this->api->patchSignatureRequestsSignatureRequestIdSignersSignerId($signatureRequestId, $signerId, $updateSigner);

        if ($apiResult instanceof \OpenAPI\Server\Model\Signer) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postSignatureRequestsIdSignersIdIdentityVerification
     *
     * Pre-verify an identity document.
     *
     */
    public function postSignatureRequestsIdSignersIdIdentityVerification(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'signerId' => [
                    'required',
                    'string',
                ],
                'type' => [
                    'required',
                ],
                'recto' => [
                    'file',
                    'required',
                ],
                'verso' => [
                    'file',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $type = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\SignerIdentityVerificationType::class);

        $recto = $request->file('recto');

        $verso = $request->file('verso');


        $apiResult = $this->api->postSignatureRequestsIdSignersIdIdentityVerification($signatureRequestId, $signerId, $type, $recto, $verso);

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent204) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 204);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postSignatureRequestsIdSignersIdUnblockIdentification
     *
     * Unblock Signer after an identity mismatch.
     *
     */
    public function postSignatureRequestsIdSignersIdUnblockIdentification(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'signerId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->postSignatureRequestsIdSignersIdUnblockIdentification($signatureRequestId, $signerId);

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent204) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 204);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postSignatureRequestsSignatureRequestIdSigners
     *
     * Create a new Signer.
     *
     */
    public function postSignatureRequestsSignatureRequestIdSigners(Request $request, string $signatureRequestId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $createSigner = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\CreateSigner::class);


        $apiResult = $this->api->postSignatureRequestsSignatureRequestIdSigners($signatureRequestId, $createSigner);

        if ($apiResult instanceof \OpenAPI\Server\Model\Signer) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp
     *
     * Send a One-Time Password (OTP) to a Signer.
     *
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'signerId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp($signatureRequestId, $signerId);

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent204) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 204);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder
     *
     * Send manual reminder to a Signer.
     *
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'signerId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder($signatureRequestId, $signerId);

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent201) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postSignatureRequestsSignatureRequestIdSignersSignerIdSign
     *
     * Sign a Signature Request.
     *
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSign(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $signerSign = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\SignerSign::class);


        $apiResult = $this->api->postSignatureRequestsSignatureRequestIdSignersSignerIdSign($signatureRequestId, $signerId, $signerSign);

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent204) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 204);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
