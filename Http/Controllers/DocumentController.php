<?php declare(strict_types=1);

/**
 * Public Api v3
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use OpenAPI\Server\Api\DocumentApiInterface;

class DocumentController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly DocumentApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation deleteSignatureRequestsSignatureRequestIdDocumentsDocumentId
     *
     * Delete a Document.
     *
     */
    public function deleteSignatureRequestsSignatureRequestIdDocumentsDocumentId(Request $request, string $signatureRequestId, string $documentId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'documentId' => $documentId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'documentId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->deleteSignatureRequestsSignatureRequestIdDocumentsDocumentId($signatureRequestId, $documentId);

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent204) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 204);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSignatureRequestsSignatureRequestIdDocuments
     *
     * List Signature Request's Documents.
     *
     */
    public function getSignatureRequestsSignatureRequestIdDocuments(Request $request, string $signatureRequestId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'nature' => [
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $nature = $request->get('nature');
        $nature = $this->serde->deserialize($request->getContent(), from: 'json', to: object::class);


        $apiResult = $this->api->getSignatureRequestsSignatureRequestIdDocuments($signatureRequestId, $nature);

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSignatureRequestsSignatureRequestIdDocumentsDocumentId
     *
     * Get a Document.
     *
     */
    public function getSignatureRequestsSignatureRequestIdDocumentsDocumentId(Request $request, string $signatureRequestId, string $documentId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'documentId' => $documentId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'documentId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->getSignatureRequestsSignatureRequestIdDocumentsDocumentId($signatureRequestId, $documentId);

        if ($apiResult instanceof \OpenAPI\Server\Model\Document) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSignatureRequestsSignatureRequestIdDocumentsDocumentsIdDownload
     *
     * Download a single Signature Request's Document.
     *
     */
    public function getSignatureRequestsSignatureRequestIdDocumentsDocumentsIdDownload(Request $request, string $signatureRequestId, string $documentId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'documentId' => $documentId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'documentId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->getSignatureRequestsSignatureRequestIdDocumentsDocumentsIdDownload($signatureRequestId, $documentId);

        if ($apiResult instanceof \Illuminate\Http\UploadedFile) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSignatureRequestsSignatureRequestIdDocumentsDownload
     *
     * Download Signature Request's Documents.
     *
     */
    public function getSignatureRequestsSignatureRequestIdDocumentsDownload(Request $request, string $signatureRequestId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'version' => [
                ],
                'archive' => [
                    'boolean',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $version = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\GetSignatureRequestsSignatureRequestIdDocumentsDownloadVersionParameter::class);

        $archive = $request->boolean('archive');


        $apiResult = $this->api->getSignatureRequestsSignatureRequestIdDocumentsDownload($signatureRequestId, $version, $archive);

        if ($apiResult instanceof \Illuminate\Http\UploadedFile) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation patchSignatureRequestsSignatureRequestIdDocumentsDocumentId
     *
     * Update a Document.
     *
     */
    public function patchSignatureRequestsSignatureRequestIdDocumentsDocumentId(Request $request, string $signatureRequestId, string $documentId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'documentId' => $documentId,
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $updateDocument = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\UpdateDocument::class);


        $apiResult = $this->api->patchSignatureRequestsSignatureRequestIdDocumentsDocumentId($signatureRequestId, $documentId, $updateDocument);

        if ($apiResult instanceof \OpenAPI\Server\Model\Document) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postSignatureRequestsSignatureRequestIdDocuments
     *
     * Add a sealed Document to a Signature Request.
     *
     */
    public function postSignatureRequestsSignatureRequestIdDocuments(Request $request, string $signatureRequestId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'file' => [
                    'file',
                    'required',
                ],
                'nature' => [
                    'required',
                ],
                'insertAfterId' => [
                    'string',
                ],
                'password' => [
                    'string',
                ],
                'name' => [
                    'min:1',
                    'max:128',
                    'regex:/^(?!\\s)[^\/\\\\]+(?<!\\s)$/',
                    'string',
                ],
                'initials' => [
                ],
                'parseAnchors' => [
                    'boolean',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $file = $request->file('file');

        $nature = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\CreateDocumentFromMultipartNature::class);

        $insertAfterId = $request->string('insertAfterId')->value();

        $password = $request->string('password')->value();

        $name = $request->string('name')->value();

        $initials = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\InitialsArea::class);

        $parseAnchors = $request->boolean('parseAnchors');


        $apiResult = $this->api->postSignatureRequestsSignatureRequestIdDocuments($signatureRequestId, $file, $nature, $insertAfterId, $password, $name, $initials, $parseAnchors);

        if ($apiResult instanceof \OpenAPI\Server\Model\Document) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplace
     *
     * Replace a Document in a Signature Request.
     *
     */
    public function postSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplace(Request $request, string $signatureRequestId, string $documentId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'documentId' => $documentId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'documentId' => [
                    'required',
                    'string',
                ],
                'file' => [
                    'file',
                    'required',
                ],
                'name' => [
                    'min:1',
                    'max:128',
                    'regex:/^(?!\\s)[^\/\\\\]+(?<!\\s)$/',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $file = $request->file('file');

        $name = $request->string('name')->value();


        $apiResult = $this->api->postSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplace($signatureRequestId, $documentId, $file, $name);

        if ($apiResult instanceof \OpenAPI\Server\Model\Document) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
