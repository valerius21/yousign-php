<?php declare(strict_types=1);

/**
 * Public Api v3
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use OpenAPI\Server\Api\BankAccountVerificationApiInterface;

class BankAccountVerificationController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly BankAccountVerificationApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation getVerificationsBankAccounts
     *
     * List Bank Account Verifications.
     *
     */
    public function getVerificationsBankAccounts(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'after' => [
                    'min:1',
                    'string',
                ],
                'limit' => [
                    'gte:1',
                    'lte:100',
                    'integer',
                ],
                'status' => [
                ],
                'workspaceId' => [
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $after = $request->string('after')->value();

        $limit = $request->integer('limit');

        $status = $request->get('status');
        $status = $this->serde->deserialize($request->getContent(), from: 'json', to: object::class);

        $workspaceId = $request->get('workspaceId');
        $workspaceId = $this->serde->deserialize($request->getContent(), from: 'json', to: object::class);


        $apiResult = $this->api->getVerificationsBankAccounts($after, $limit, $status, $workspaceId);

        if ($apiResult instanceof \OpenAPI\Server\Model\GetVerificationsBankAccounts200Response) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getVerificationsBankAccountsId
     *
     * Retrieve a Bank Account Verification.
     *
     */
    public function getVerificationsBankAccountsId(Request $request, string $bankAccountVerificationId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'bankAccountVerificationId' => $bankAccountVerificationId,
                ],
                $request->all(),
            ),
            [
                'bankAccountVerificationId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $apiResult = $this->api->getVerificationsBankAccountsId($bankAccountVerificationId);

        if ($apiResult instanceof \OpenAPI\Server\Model\BankAccountFull) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postVerificationsBankAccounts
     *
     * Initiate a new Bank Account Verification.
     *
     */
    public function postVerificationsBankAccounts(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'file' => [
                    'file',
                ],
                'iban' => [
                    'min:14',
                    'max:34',
                    'regex:/^([A-Z]{2}[ \\-]?[0-9]{2})(?=(?:[ \\-]?[A-Z0-9]){9,30}$)((?:[ \\-]?[A-Z0-9]{3,5}){2,7})([ \\-]?[A-Z0-9]{1,3})?$/',
                    'string',
                ],
                'bic' => [
                    'min:8',
                    'max:11',
                    'regex:/^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$/',
                    'string',
                ],
                'workspaceId' => [
                    'string',
                ],
                'legalPerson' => [
                ],
                'naturalPerson' => [
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $file = $request->file('file');

        $iban = $request->string('iban')->value();

        $bic = $request->string('bic')->value();

        $workspaceId = $request->string('workspaceId')->value();

        $legalPerson = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\InitiateBankAccountWithLegalPersonLegalPerson::class);

        $naturalPerson = $this->serde->deserialize($request->getContent(), from: 'json', to: \OpenAPI\Server\Model\InitiateBankAccountWithNaturalPersonNaturalPerson::class);


        $apiResult = $this->api->postVerificationsBankAccounts($file, $iban, $bic, $workspaceId, $legalPerson, $naturalPerson);

        if ($apiResult instanceof \OpenAPI\Server\Model\BankAccountFull) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnsupportedMediaTypeResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 415);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
