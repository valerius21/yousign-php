<?php declare(strict_types=1);

/**
 * Public Api v3
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use OpenAPI\Server\Api\AuditTrailApiInterface;

class AuditTrailController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly AuditTrailApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation getSignatureRequestsSignatureRequestIdAuditTrailsDownload
     *
     * Download Signature Request Audit Trails.
     *
     */
    public function getSignatureRequestsSignatureRequestIdAuditTrailsDownload(Request $request, string $signatureRequestId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'merge' => [
                    'boolean',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $merge = $request->boolean('merge');


        $apiResult = $this->api->getSignatureRequestsSignatureRequestIdAuditTrailsDownload($signatureRequestId, $merge);

        if ($apiResult instanceof \Illuminate\Http\UploadedFile) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrails
     *
     * Get Signer Audit Trail.
     *
     */
    public function getSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrails(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'signerId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->getSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrails($signatureRequestId, $signerId);

        if ($apiResult instanceof \OpenAPI\Server\Model\SignerAuditTrail) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSignersSignerIdAuditTrailsDownload
     *
     * Download Audit Trail PDF.
     *
     */
    public function getSignersSignerIdAuditTrailsDownload(Request $request, string $signatureRequestId, string $signerId): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'signatureRequestId' => $signatureRequestId,'signerId' => $signerId,
                ],
                $request->all(),
            ),
            [
                'signatureRequestId' => [
                    'required',
                    'string',
                ],
                'signerId' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $apiResult = $this->api->getSignersSignerIdAuditTrailsDownload($signatureRequestId, $signerId);

        if ($apiResult instanceof \Illuminate\Http\UploadedFile) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BadRequestResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\UnauthorizedResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ForbiddenResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NotFoundResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MethodNotAllowed) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 405);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\TooManyRequestsResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\InternalServerError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
