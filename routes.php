<?php declare(strict_types=1);

/**
 * Public Api v3
 * Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0
 * Contact: contact@yousign.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


use Illuminate\Support\Facades\Route;

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdApproversApproverId
 * Summary: Delete an Approver
 * Notes: Deletes a given Approver from a Signature Request.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/approvers/{approverId}', [\OpenAPI\Server\Http\Controllers\ApproverController::class, 'deleteSignatureRequestsSignatureRequestIdApproversApproverId'])->name('approver.delete.signature.requests.signature.request.id.approvers.approver.id');

/**
 * GET getSignatureRequestsSignatureRequestIdApproversApproverId
 * Summary: Get an Approver
 * Notes: Retrieves a given Approver.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/approvers/{approverId}', [\OpenAPI\Server\Http\Controllers\ApproverController::class, 'getSignatureRequestsSignatureRequestIdApproversApproverId'])->name('approver.get.signature.requests.signature.request.id.approvers.approver.id');

/**
 * PATCH patchSignatureRequestsSignatureRequestIdApproversApproverId
 * Summary: Update an Approver
 * Notes: Updates a given Approver. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/signature_requests/{signatureRequestId}/approvers/{approverId}', [\OpenAPI\Server\Http\Controllers\ApproverController::class, 'patchSignatureRequestsSignatureRequestIdApproversApproverId'])->name('approver.patch.signature.requests.signature.request.id.approvers.approver.id');

/**
 * POST postSignatureRequestsSignatureRequestIdApprovers
 * Summary: Create a new Approver
 * Notes: Adds an Approver to a given Signature Request.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/approvers', [\OpenAPI\Server\Http\Controllers\ApproverController::class, 'postSignatureRequestsSignatureRequestIdApprovers'])->name('approver.post.signature.requests.signature.request.id.approvers');

/**
 * POST postSignatureRequestsSignatureRequestIdApproversApproverIdSendReminder
 * Summary: Send manual reminder to an Approver
 * Notes: Sends a reminder to a given Approver to review their Signature Request. Only possible when the Signature Request status is &#x60;approval&#x60; and the Approver status is &#x60;notified&#x60;.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/approvers/{approverId}/send_reminder', [\OpenAPI\Server\Http\Controllers\ApproverController::class, 'postSignatureRequestsSignatureRequestIdApproversApproverIdSendReminder'])->name('approver.post.signature.requests.signature.request.id.approvers.approver.id.send.reminder');

/**
 * GET getArchivesArchivedFileIdDownload
 * Summary: Download archived file
 * Notes: Download the archived file using the ArchivedFileId.
 */
Route::GET('/v3/archives/{archivedFileId}/download', [\OpenAPI\Server\Http\Controllers\ArchiveController::class, 'getArchivesArchivedFileIdDownload'])->name('archive.get.archives.archived.file.id.download');

/**
 * POST postArchives
 * Summary: Direct upload an archived file
 * Notes: Archive a file in a secure digital safe for 10 years
 */
Route::POST('/v3/archives', [\OpenAPI\Server\Http\Controllers\ArchiveController::class, 'postArchives'])->name('archive.post.archives');

/**
 * GET getSignatureRequestsSignatureRequestIdAuditTrailsDownload
 * Summary: Download Signature Request Audit Trails
 * Notes: Download the PDF version of all the Audit Trails attached to a given Signature Request. Each Audit Trail is bound to a different Signer. Only possible when the Signature Request status is &#x60;done&#x60;.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/audit_trails/download', [\OpenAPI\Server\Http\Controllers\AuditTrailController::class, 'getSignatureRequestsSignatureRequestIdAuditTrailsDownload'])->name('auditTrail.get.signature.requests.signature.request.id.audit.trails.download');

/**
 * GET getSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrails
 * Summary: Get Signer Audit Trail
 * Notes: Retrieves the JSON version of the Audit Trail attached to a given Signer. Only possible when Signer status is &#x60;signed&#x60;.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/audit_trails', [\OpenAPI\Server\Http\Controllers\AuditTrailController::class, 'getSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrails'])->name('auditTrail.get.signature.requests.signature.request.id.signers.signer.id.audit.trails');

/**
 * GET getSignersSignerIdAuditTrailsDownload
 * Summary: Download Audit Trail PDF
 * Notes: Download the PDF version of the Audit Trail attached to a given Signer. Only possible when Signer status is &#x60;signed&#x60;.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/audit_trails/download', [\OpenAPI\Server\Http\Controllers\AuditTrailController::class, 'getSignersSignerIdAuditTrailsDownload'])->name('auditTrail.get.signers.signer.id.audit.trails.download');

/**
 * GET getVerificationsBankAccountConnections
 * Summary: List Bank Account Connection Verifications
 * Notes: Returns the list of all Bank Account Connection Verifications within your organization. You can limit the number of items returned by using filters and pagination.
 */
Route::GET('/v3/verifications/bank_account_connections', [\OpenAPI\Server\Http\Controllers\BankAccountConnectionVerificationController::class, 'getVerificationsBankAccountConnections'])->name('bankAccountConnectionVerification.get.verifications.bank.account.connections');

/**
 * GET getVerificationsBankAccountConnectionsId
 * Summary: Retrieve a Bank Account Connection Verification
 * Notes: Get the detailed results of a Bank Account Connection Verification.
 */
Route::GET('/v3/verifications/bank_account_connections/{verificationId}', [\OpenAPI\Server\Http\Controllers\BankAccountConnectionVerificationController::class, 'getVerificationsBankAccountConnectionsId'])->name('bankAccountConnectionVerification.get.verifications.bank.account.connections.id');

/**
 * POST postVerificationsBankAccountConnections
 * Summary: Initiate a new Bank Account Connection
 * Notes: Initiate a new Bank Account Connection resource
 */
Route::POST('/v3/verifications/bank_account_connections', [\OpenAPI\Server\Http\Controllers\BankAccountConnectionVerificationController::class, 'postVerificationsBankAccountConnections'])->name('bankAccountConnectionVerification.post.verifications.bank.account.connections');

/**
 * GET getVerificationsBankAccountLookups
 * Summary: List Bank Account Lookup Verifications
 * Notes: Returns the list of all Bank Account Lookup Verifications within your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
 */
Route::GET('/v3/verifications/bank_account_lookups', [\OpenAPI\Server\Http\Controllers\BankAccountLookupVerificationController::class, 'getVerificationsBankAccountLookups'])->name('bankAccountLookupVerification.get.verifications.bank.account.lookups');

/**
 * GET getVerificationsBankAccountLookupsId
 * Summary: Retrieve a Bank Account Lookup Verification
 * Notes: Retrieve a specific Bank Account Lookup Verification by its ID.
 */
Route::GET('/v3/verifications/bank_account_lookups/{bankAccountLookupVerificationId}', [\OpenAPI\Server\Http\Controllers\BankAccountLookupVerificationController::class, 'getVerificationsBankAccountLookupsId'])->name('bankAccountLookupVerification.get.verifications.bank.account.lookups.id');

/**
 * POST postVerificationsBankAccountLookups
 * Summary: Initiate a new Bank Account Lookup Verification
 * Notes: Initiate a new Bank Account Lookup Verification to check if a bank account exists and belongs to the specified person or company.
 */
Route::POST('/v3/verifications/bank_account_lookups', [\OpenAPI\Server\Http\Controllers\BankAccountLookupVerificationController::class, 'postVerificationsBankAccountLookups'])->name('bankAccountLookupVerification.post.verifications.bank.account.lookups');

/**
 * GET getVerificationsBankAccounts
 * Summary: List Bank Account Verifications
 * Notes: Returns the list of all Bank Account Verifications within your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
 */
Route::GET('/v3/verifications/bank_accounts', [\OpenAPI\Server\Http\Controllers\BankAccountVerificationController::class, 'getVerificationsBankAccounts'])->name('bankAccountVerification.get.verifications.bank.accounts');

/**
 * GET getVerificationsBankAccountsId
 * Summary: Retrieve a Bank Account Verification
 * Notes: Get the detailed results of a Bank Account Verification.
 */
Route::GET('/v3/verifications/bank_accounts/{bankAccountVerificationId}', [\OpenAPI\Server\Http\Controllers\BankAccountVerificationController::class, 'getVerificationsBankAccountsId'])->name('bankAccountVerification.get.verifications.bank.accounts.id');

/**
 * POST postVerificationsBankAccounts
 * Summary: Initiate a new Bank Account Verification
 * Notes: Ask for a Bank Account Verification by sending the file containing the bank account details, such as IBAN and BIC.
 */
Route::POST('/v3/verifications/bank_accounts', [\OpenAPI\Server\Http\Controllers\BankAccountVerificationController::class, 'postVerificationsBankAccounts'])->name('bankAccountVerification.post.verifications.bank.accounts');

/**
 * GET getVerificationsCompanies
 * Summary: List Company Verifications
 * Notes: Returns the list of all Company Verifications within your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
 */
Route::GET('/v3/verifications/companies', [\OpenAPI\Server\Http\Controllers\CompanyVerificationController::class, 'getVerificationsCompanies'])->name('companyVerification.get.verifications.companies');

/**
 * GET getVerificationsCompaniesId
 * Summary: Retrieve a Company Verification
 * Notes: Get the detailed results of a Company Verification.
 */
Route::GET('/v3/verifications/companies/{companyVerificationId}', [\OpenAPI\Server\Http\Controllers\CompanyVerificationController::class, 'getVerificationsCompaniesId'])->name('companyVerification.get.verifications.companies.id');

/**
 * POST postVerificationsCompanies
 * Summary: Initiate a new Company Verification
 * Notes: Initiate a new Company Verification
 */
Route::POST('/v3/verifications/companies', [\OpenAPI\Server\Http\Controllers\CompanyVerificationController::class, 'postVerificationsCompanies'])->name('companyVerification.post.verifications.companies');

/**
 * GET getConsumptionAddon
 * Summary: Get detailed addon consumption.
 * Notes: Retrieves detailed addon consumption for the current subscription period.
 */
Route::GET('/v3/consumptions/addons', [\OpenAPI\Server\Http\Controllers\ConsumptionController::class, 'getConsumptionAddon'])->name('consumption.get.consumption.addon');

/**
 * GET getConsumptionDetail
 * Summary: Get detailed Consumption data
 * Notes: Returns the consumption of your organization over a specified period.
 */
Route::GET('/v3/consumptions/detail', [\OpenAPI\Server\Http\Controllers\ConsumptionController::class, 'getConsumptionDetail'])->name('consumption.get.consumption.detail');

/**
 * GET getConsumptions
 * Summary: Get Consumptions
 * Notes: Get signatures Consumption by source
 */
Route::GET('/v3/consumptions', [\OpenAPI\Server\Http\Controllers\ConsumptionController::class, 'getConsumptions'])->name('consumption.get.consumptions');

/**
 * GET getConsumptionsExport
 * Summary: Export Consumption data
 * Notes: Get a binary .csv file containing all the Consumption data of the underlying signatures
 */
Route::GET('/v3/consumptions/export', [\OpenAPI\Server\Http\Controllers\ConsumptionController::class, 'getConsumptionsExport'])->name('consumption.get.consumptions.export');

/**
 * DELETE deleteContactsContactId
 * Summary: Delete a Contact
 * Notes: Deletes a given Contact.
 */
Route::DELETE('/v3/contacts/{contactId}', [\OpenAPI\Server\Http\Controllers\ContactController::class, 'deleteContactsContactId'])->name('contact.delete.contacts.contact.id');

/**
 * GET getContacts
 * Summary: List Contacts
 * Notes: Returns the list of all the Contacts within your organization.
 */
Route::GET('/v3/contacts', [\OpenAPI\Server\Http\Controllers\ContactController::class, 'getContacts'])->name('contact.get.contacts');

/**
 * GET getContactsContactId
 * Summary: Get a Contact
 * Notes: Retrieves a given Contact.
 */
Route::GET('/v3/contacts/{contactId}', [\OpenAPI\Server\Http\Controllers\ContactController::class, 'getContactsContactId'])->name('contact.get.contacts.contact.id');

/**
 * PATCH patchContactsContactId
 * Summary: Update a Contact
 * Notes: Updates a given Contact. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/contacts/{contactId}', [\OpenAPI\Server\Http\Controllers\ContactController::class, 'patchContactsContactId'])->name('contact.patch.contacts.contact.id');

/**
 * POST postContact
 * Summary: Create a Contact
 * Notes: Creates a new Contact.
 */
Route::POST('/v3/contacts', [\OpenAPI\Server\Http\Controllers\ContactController::class, 'postContact'])->name('contact.post.contact');

/**
 * DELETE deleteCustomExperience
 * Summary: Delete a Custom Experience
 * Notes: Deletes a given Custom Experience.
 */
Route::DELETE('/v3/custom_experiences/{customExperienceId}', [\OpenAPI\Server\Http\Controllers\CustomExperienceController::class, 'deleteCustomExperience'])->name('customExperience.delete.custom.experience');

/**
 * DELETE deleteCustomExperienceLogo
 * Summary: Delete a Custom Experience logo
 * Notes: Deletes the logo of a Custom Experience.
 */
Route::DELETE('/v3/custom_experiences/{customExperienceId}/logo', [\OpenAPI\Server\Http\Controllers\CustomExperienceController::class, 'deleteCustomExperienceLogo'])->name('customExperience.delete.custom.experience.logo');

/**
 * GET getCustomExperiences
 * Summary: List Custom Experiences
 * Notes: Returns the list of all Custom Experiences in your Organization. You can limit the number of items returned by using pagination.
 */
Route::GET('/v3/custom_experiences', [\OpenAPI\Server\Http\Controllers\CustomExperienceController::class, 'getCustomExperiences'])->name('customExperience.get.custom.experiences');

/**
 * GET getCustomExperiencesCustomExperienceId
 * Summary: Get a Custom Experience
 * Notes: Retrieves a given Custom Experience.
 */
Route::GET('/v3/custom_experiences/{customExperienceId}', [\OpenAPI\Server\Http\Controllers\CustomExperienceController::class, 'getCustomExperiencesCustomExperienceId'])->name('customExperience.get.custom.experiences.custom.experience.id');

/**
 * POST patchCustomExperienceLogo
 * Summary: Update a Custom Experience logo
 * Notes: Updates the logo of a given Custom Experience by uploading the image of your choice.
 */
Route::POST('/v3/custom_experiences/{customExperienceId}/logo', [\OpenAPI\Server\Http\Controllers\CustomExperienceController::class, 'patchCustomExperienceLogo'])->name('customExperience.patch.custom.experience.logo');

/**
 * PATCH patchCustomExperiencesCustomExperienceId
 * Summary: Update a Custom Experience
 * Notes: Updates a given Custom Experience. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/custom_experiences/{customExperienceId}', [\OpenAPI\Server\Http\Controllers\CustomExperienceController::class, 'patchCustomExperiencesCustomExperienceId'])->name('customExperience.patch.custom.experiences.custom.experience.id');

/**
 * POST postCustomExperience
 * Summary: Create a Custom Experience
 * Notes: Creates a new Custom Experience.
 */
Route::POST('/v3/custom_experiences', [\OpenAPI\Server\Http\Controllers\CustomExperienceController::class, 'postCustomExperience'])->name('customExperience.post.custom.experience');

/**
 * POST createIdDocumentVerification
 * Summary: [DEPRECATED] Initiate a new ID document verification
 * Notes: Deprecated endpoint, do not use. Verify a person’s ID document by sending the file containing their ID document (ID card, passport, residence permit or driving license).
 */
Route::POST('/v3/id_document_verifications', [\OpenAPI\Server\Http\Controllers\DeprecatedController::class, 'createIdDocumentVerification'])->name('deprecated.create.id.document.verification');

/**
 * GET getBankAccountVerifications
 * Summary: [DEPRECATED] List Bank Account Verifications
 * Notes: Deprecated endpoint, do not use. Returns the list of all Bank Account Verifications within your organization.
 */
Route::GET('/v3/bank_account_verifications', [\OpenAPI\Server\Http\Controllers\DeprecatedController::class, 'getBankAccountVerifications'])->name('deprecated.get.bank.account.verifications');

/**
 * GET getBankAccountVerificationsBankAccountVerificationId
 * Summary: [DEPRECATED] Retrieve a bank account verification
 * Notes: Deprecated endpoint, do not use. Get the detailed results of a bank account verification.
 */
Route::GET('/v3/bank_account_verifications/{bankAccountVerificationId}', [\OpenAPI\Server\Http\Controllers\DeprecatedController::class, 'getBankAccountVerificationsBankAccountVerificationId'])->name('deprecated.get.bank.account.verifications.bank.account.verification.id');

/**
 * GET getIdDocumentVerification
 * Summary: [DEPRECATED] Retrieve an ID document verification
 * Notes: Deprecated endpoint, do not use. Get the detailed results of an ID document verification, including the status of the verification, the reasons in case of rejection and the data extracted from the ID document.
 */
Route::GET('/v3/id_document_verifications/{idDocumentVerificationId}', [\OpenAPI\Server\Http\Controllers\DeprecatedController::class, 'getIdDocumentVerification'])->name('deprecated.get.id.document.verification');

/**
 * GET getIdDocumentVerifications
 * Summary: [DEPRECATED] List ID Document Verifications
 * Notes: Deprecated endpoint, do not use. Returns the list of all ID Document Verifications within your organization.
 */
Route::GET('/v3/id_document_verifications', [\OpenAPI\Server\Http\Controllers\DeprecatedController::class, 'getIdDocumentVerifications'])->name('deprecated.get.id.document.verifications');

/**
 * POST postBankAccountVerifications
 * Summary: [DEPRECATED] Initiate a new Bank Account Verification
 * Notes: Deprecated endpoint, do not use. Creates a new Bank Account Verification resource.
 */
Route::POST('/v3/bank_account_verifications', [\OpenAPI\Server\Http\Controllers\DeprecatedController::class, 'postBankAccountVerifications'])->name('deprecated.post.bank.account.verifications');

/**
 * POST postDocuments
 * Summary: [DEPRECATED] Upload a Document
 * Notes: Deprecated endpoint, do not use.
 */
Route::POST('/v3/documents', [\OpenAPI\Server\Http\Controllers\DeprecatedController::class, 'postDocuments'])->name('deprecated.post.documents');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdDocumentsDocumentId
 * Summary: Delete a Document
 * Notes: Deletes a given Document from a Signature Request.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/documents/{documentId}', [\OpenAPI\Server\Http\Controllers\DocumentController::class, 'deleteSignatureRequestsSignatureRequestIdDocumentsDocumentId'])->name('document.delete.signature.requests.signature.request.id.documents.document.id');

/**
 * GET getSignatureRequestsSignatureRequestIdDocuments
 * Summary: List Signature Request&#39;s Documents
 * Notes: Returns a list of Documents for a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/documents', [\OpenAPI\Server\Http\Controllers\DocumentController::class, 'getSignatureRequestsSignatureRequestIdDocuments'])->name('document.get.signature.requests.signature.request.id.documents');

/**
 * GET getSignatureRequestsSignatureRequestIdDocumentsDocumentId
 * Summary: Get a Document
 * Notes: Retrieves a given Document.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/documents/{documentId}', [\OpenAPI\Server\Http\Controllers\DocumentController::class, 'getSignatureRequestsSignatureRequestIdDocumentsDocumentId'])->name('document.get.signature.requests.signature.request.id.documents.document.id');

/**
 * GET getSignatureRequestsSignatureRequestIdDocumentsDocumentsIdDownload
 * Summary: Download a single Signature Request&#39;s Document
 * Notes: Downloads the PDF version of a given Document.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/documents/{documentId}/download', [\OpenAPI\Server\Http\Controllers\DocumentController::class, 'getSignatureRequestsSignatureRequestIdDocumentsDocumentsIdDownload'])->name('document.get.signature.requests.signature.request.id.documents.documents.id.download');

/**
 * GET getSignatureRequestsSignatureRequestIdDocumentsDownload
 * Summary: Download Signature Request&#39;s Documents
 * Notes: Downloads the PDF version of all Documents attached to a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/documents/download', [\OpenAPI\Server\Http\Controllers\DocumentController::class, 'getSignatureRequestsSignatureRequestIdDocumentsDownload'])->name('document.get.signature.requests.signature.request.id.documents.download');

/**
 * PATCH patchSignatureRequestsSignatureRequestIdDocumentsDocumentId
 * Summary: Update a Document
 * Notes: Updates a given Document. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/signature_requests/{signatureRequestId}/documents/{documentId}', [\OpenAPI\Server\Http\Controllers\DocumentController::class, 'patchSignatureRequestsSignatureRequestIdDocumentsDocumentId'])->name('document.patch.signature.requests.signature.request.id.documents.document.id');

/**
 * POST postSignatureRequestsSignatureRequestIdDocuments
 * Summary: Add a sealed Document to a Signature Request
 * Notes: Add a sealed Document to a given Signature Request.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/documents', [\OpenAPI\Server\Http\Controllers\DocumentController::class, 'postSignatureRequestsSignatureRequestIdDocuments'])->name('document.post.signature.requests.signature.request.id.documents');

/**
 * POST postSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplace
 * Summary: Replace a Document in a Signature Request
 * Notes: Replace the file of a given Document.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/documents/{documentId}/replace', [\OpenAPI\Server\Http\Controllers\DocumentController::class, 'postSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplace'])->name('document.post.signature.requests.signature.request.id.documents.document.id.replace');

/**
 * GET getElectronicSeal
 * Summary: Get an Electronic Seal
 * Notes: Retrieves a given Electronic Seal.
 */
Route::GET('/v3/electronic_seals/{electronicSealId}', [\OpenAPI\Server\Http\Controllers\ElectronicSealController::class, 'getElectronicSeal'])->name('electronicSeal.get.electronic.seal');

/**
 * GET listElectronicSealImages
 * Summary: List Electronic Seal Images
 * Notes: Lists Electronic Seal Images. The list is paginated and can be filtered by the &#x60;after&#x60; cursor.
 */
Route::GET('/v3/electronic_seal_images', [\OpenAPI\Server\Http\Controllers\ElectronicSealController::class, 'listElectronicSealImages'])->name('electronicSeal.list.electronic.seal.images');

/**
 * POST postElectronicSeals
 * Summary: Create an Electronic Seal
 * Notes: Create a new Electronic Seal
 */
Route::POST('/v3/electronic_seals', [\OpenAPI\Server\Http\Controllers\ElectronicSealController::class, 'postElectronicSeals'])->name('electronicSeal.post.electronic.seals');

/**
 * GET downloadElectronicSealAuditTrail
 * Summary: Download an Electronic Seal Audit Trail
 * Notes: Electronic Seal Audit Trail is only available when the Electronic Seal is \&quot;done\&quot;.
 */
Route::GET('/v3/electronic_seals/{electronicSealId}/audit_trails/download', [\OpenAPI\Server\Http\Controllers\ElectronicSealAuditTrailController::class, 'downloadElectronicSealAuditTrail'])->name('electronicSealAuditTrail.download.electronic.seal.audit.trail');

/**
 * GET getElectronicSealAuditTrail
 * Summary: Get an Electronic Seal Audit Trail
 * Notes: Electronic Seal Audit Trail is only available when the Electronic Seal is \&quot;done\&quot;.
 */
Route::GET('/v3/electronic_seals/{electronicSealId}/audit_trails', [\OpenAPI\Server\Http\Controllers\ElectronicSealAuditTrailController::class, 'getElectronicSealAuditTrail'])->name('electronicSealAuditTrail.get.electronic.seal.audit.trail');

/**
 * GET downloadElectronicSealDocument
 * Summary: Download an Electronic Seal Document
 * Notes: Download a given Electronic Seal Document.
 */
Route::GET('/v3/electronic_seal_documents/{electronicSealDocumentId}/download', [\OpenAPI\Server\Http\Controllers\ElectronicSealDocumentController::class, 'downloadElectronicSealDocument'])->name('electronicSealDocument.download.electronic.seal.document');

/**
 * POST uploadElectronicSealDocument
 * Summary: Create an Electronic Seal Document
 * Notes: Create an Electronic Seal Document from an other one.
 */
Route::POST('/v3/electronic_seal_documents', [\OpenAPI\Server\Http\Controllers\ElectronicSealDocumentController::class, 'uploadElectronicSealDocument'])->name('electronicSealDocument.upload.electronic.seal.document');

/**
 * DELETE deleteElectronicSealImage
 * Summary: Delete an Electronic Seal Image
 * Notes: Deletes a given Electronic Seal Image.
 */
Route::DELETE('/v3/electronic_seal_images/{electronicSealImageId}', [\OpenAPI\Server\Http\Controllers\ElectronicSealImageController::class, 'deleteElectronicSealImage'])->name('electronicSealImage.delete.electronic.seal.image');

/**
 * GET downloadElectronicSealImage
 * Summary: Download an Electronic Seal Image
 * Notes: Download a given Electronic Seal Image.
 */
Route::GET('/v3/electronic_seal_images/{electronicSealImageId}/download', [\OpenAPI\Server\Http\Controllers\ElectronicSealImageController::class, 'downloadElectronicSealImage'])->name('electronicSealImage.download.electronic.seal.image');

/**
 * POST uploadElectronicSealImage
 * Summary: Upload an Electronic Seal Image
 * Notes: Upload an Electronic Seal Image to use for creating an Electronic Seal (can be used for several Electronic Seals).
 */
Route::POST('/v3/electronic_seal_images', [\OpenAPI\Server\Http\Controllers\ElectronicSealImageController::class, 'uploadElectronicSealImage'])->name('electronicSealImage.upload.electronic.seal.image');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdDocumentsDocumentIdFieldsFieldId
 * Summary: Delete a Field
 * Notes: Deletes a given Field from a Document.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/documents/{documentId}/fields/{fieldId}', [\OpenAPI\Server\Http\Controllers\FieldController::class, 'deleteSignatureRequestsSignatureRequestIdDocumentsDocumentIdFieldsFieldId'])->name('field.delete.signature.requests.signature.request.id.documents.document.id.fields.field.id');

/**
 * GET getSignatureRequestsSignatureRequestIdDocumentsDocumentIdFields
 * Summary: Lists the Fields of a Signature Request Document.
 * Notes: Returns a list of Fields for a given Document. You can limit the number of items returned by using filters.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/documents/{documentId}/fields', [\OpenAPI\Server\Http\Controllers\FieldController::class, 'getSignatureRequestsSignatureRequestIdDocumentsDocumentIdFields'])->name('field.get.signature.requests.signature.request.id.documents.document.id.fields');

/**
 * POST postSignatureRequestsSignatureRequestIdDocumentsDocumentIdFields
 * Summary: Create a new Field on a Document
 * Notes: Adds a Field to a given Document.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/documents/{documentId}/fields', [\OpenAPI\Server\Http\Controllers\FieldController::class, 'postSignatureRequestsSignatureRequestIdDocumentsDocumentIdFields'])->name('field.post.signature.requests.signature.request.id.documents.document.id.fields');

/**
 * POST signatureRequestsIdDocumentsIdFieldsIdAnswer
 * Summary: Answer a Field
 * Notes: This endpoint can be used on ongoing Signature Requests only. It aims to fill a Field value with a Signer input collected in your custom signing interface. The Fields compatible are Text Fields, Checkboxes and Radio Groups.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/documents/{documentId}/fields/{fieldId}/answer', [\OpenAPI\Server\Http\Controllers\FieldController::class, 'signatureRequestsIdDocumentsIdFieldsIdAnswer'])->name('field.signature.requests.id.documents.id.fields.id.answer');

/**
 * PATCH updateSignatureRequestsSignatureRequestIdDocumentsDocumentIdFieldsFieldId
 * Summary: Update a Field
 * Notes: Updates a given Field. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/signature_requests/{signatureRequestId}/documents/{documentId}/fields/{fieldId}', [\OpenAPI\Server\Http\Controllers\FieldController::class, 'updateSignatureRequestsSignatureRequestIdDocumentsDocumentIdFieldsFieldId'])->name('field.update.signature.requests.signature.request.id.documents.document.id.fields.field.id');

/**
 * GET getSignatureRequestsSignatureRequestIdFollowers
 * Summary: List the Signature Request&#39;s Followers
 * Notes: Returns a list of Followers for a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/followers', [\OpenAPI\Server\Http\Controllers\FollowerController::class, 'getSignatureRequestsSignatureRequestIdFollowers'])->name('follower.get.signature.requests.signature.request.id.followers');

/**
 * POST postSignatureRequestsSignatureRequestIdFollowers
 * Summary: Create new Followers
 * Notes: Adds a Follower to a given Signature Request.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/followers', [\OpenAPI\Server\Http\Controllers\FollowerController::class, 'postSignatureRequestsSignatureRequestIdFollowers'])->name('follower.post.signature.requests.signature.request.id.followers');

/**
 * GET getVerificationsIdentityDocuments
 * Summary: List Identity Document Verifications
 * Notes: Returns the list of all Identity Document Verifications within your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
 */
Route::GET('/v3/verifications/identity_documents', [\OpenAPI\Server\Http\Controllers\IdentityDocumentVerificationController::class, 'getVerificationsIdentityDocuments'])->name('identityDocumentVerification.get.verifications.identity.documents');

/**
 * GET getVerificationsIdentityDocumentsId
 * Summary: Retrieve an Identity Document Verification
 * Notes: Get the detailed results of an Identity Document Verification, including the status of the verification, the reasons in case of rejection and the data extracted from the Identity Document.
 */
Route::GET('/v3/verifications/identity_documents/{identityDocumentVerificationId}', [\OpenAPI\Server\Http\Controllers\IdentityDocumentVerificationController::class, 'getVerificationsIdentityDocumentsId'])->name('identityDocumentVerification.get.verifications.identity.documents.id');

/**
 * POST postVerificationsIdentityDocuments
 * Summary: Initiate a new Identity Document Verification
 * Notes: Verify a person&#39;s Identity Document by sending the file containing their Identity Document (identity card, passport, residence permit or driving license).
 */
Route::POST('/v3/verifications/identity_documents', [\OpenAPI\Server\Http\Controllers\IdentityDocumentVerificationController::class, 'postVerificationsIdentityDocuments'])->name('identityDocumentVerification.post.verifications.identity.documents');

/**
 * GET getVerificationsIdentityVideos
 * Summary: List Identity Videos
 * Notes: Returns the list of all Identity Videos within your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
 */
Route::GET('/v3/verifications/identity_videos', [\OpenAPI\Server\Http\Controllers\IdentityVideoVerificationController::class, 'getVerificationsIdentityVideos'])->name('identityVideoVerification.get.verifications.identity.videos');

/**
 * GET getVerificationsIdentityVideosId
 * Summary: Retrieve an Identity Video
 * Notes: Get the detailed results of an Identity Video Verification.
 */
Route::GET('/v3/verifications/identity_videos/{identityVideoVerificationId}', [\OpenAPI\Server\Http\Controllers\IdentityVideoVerificationController::class, 'getVerificationsIdentityVideosId'])->name('identityVideoVerification.get.verifications.identity.videos.id');

/**
 * POST postVerificationsIdentityVideos
 * Summary: Initiate a new Identity Video
 * Notes: Request verification of a person&#39;s identity by recording their documents and/or themselves.
 */
Route::POST('/v3/verifications/identity_videos', [\OpenAPI\Server\Http\Controllers\IdentityVideoVerificationController::class, 'postVerificationsIdentityVideos'])->name('identityVideoVerification.post.verifications.identity.videos');

/**
 * DELETE deleteLabelsId
 * Summary: Delete a Label
 * Notes: Deletes a given Label. This will remove the Label from all Signature Requests it is associated with.
 */
Route::DELETE('/v3/labels/{labelId}', [\OpenAPI\Server\Http\Controllers\LabelController::class, 'deleteLabelsId'])->name('label.delete.labels.id');

/**
 * DELETE deleteSignatureRequestsIdLabelsId
 * Summary: Remove Label from a Signature Request
 * Notes: Removes a Label from a given Signature Request.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/labels/{labelId}', [\OpenAPI\Server\Http\Controllers\LabelController::class, 'deleteSignatureRequestsIdLabelsId'])->name('label.delete.signature.requests.id.labels.id');

/**
 * GET getLabels
 * Summary: List Labels
 * Notes: Returns the list of all the Labels within your organization.
 */
Route::GET('/v3/labels', [\OpenAPI\Server\Http\Controllers\LabelController::class, 'getLabels'])->name('label.get.labels');

/**
 * GET getLabelsId
 * Summary: Get a Label
 * Notes: Retrieves a given Label within your organization.
 */
Route::GET('/v3/labels/{labelId}', [\OpenAPI\Server\Http\Controllers\LabelController::class, 'getLabelsId'])->name('label.get.labels.id');

/**
 * GET getSignatureRequestsIdLabels
 * Summary: List Labels of a Signature Request
 * Notes: Returns the list of Labels associated with a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/labels', [\OpenAPI\Server\Http\Controllers\LabelController::class, 'getSignatureRequestsIdLabels'])->name('label.get.signature.requests.id.labels');

/**
 * PATCH patchLabelId
 * Summary: Update a Label
 * Notes: Updates a given Label. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/labels/{labelId}', [\OpenAPI\Server\Http\Controllers\LabelController::class, 'patchLabelId'])->name('label.patch.label.id');

/**
 * POST postLabels
 * Summary: Create a new Label
 * Notes: Creates a new Label in the organization.
 */
Route::POST('/v3/labels', [\OpenAPI\Server\Http\Controllers\LabelController::class, 'postLabels'])->name('label.post.labels');

/**
 * PUT putSignatureRequestsIdLabelsId
 * Summary: Associate a Label with a Signature Request
 * Notes: Associates a Label with a given Signature Request.
 */
Route::PUT('/v3/signature_requests/{signatureRequestId}/labels/{labelId}', [\OpenAPI\Server\Http\Controllers\LabelController::class, 'putSignatureRequestsIdLabelsId'])->name('label.put.signature.requests.id.labels.id');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdMetadata
 * Summary: Delete the Signature Request Metadata
 * Notes: Deletes the Metadata of a given Signature Request.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/metadata', [\OpenAPI\Server\Http\Controllers\MetadataController::class, 'deleteSignatureRequestsSignatureRequestIdMetadata'])->name('metadata.delete.signature.requests.signature.request.id.metadata');

/**
 * GET getSignatureRequestsSignatureRequestIdMetadata
 * Summary: Get the Signature Request Metadata
 * Notes: Retrieves the Metadata of a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/metadata', [\OpenAPI\Server\Http\Controllers\MetadataController::class, 'getSignatureRequestsSignatureRequestIdMetadata'])->name('metadata.get.signature.requests.signature.request.id.metadata');

/**
 * POST postSignatureRequestsSignatureRequestIdMetadata
 * Summary: Attach Metadata to a Signature Request
 * Notes: Add Metadata to a given Signature Request.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/metadata', [\OpenAPI\Server\Http\Controllers\MetadataController::class, 'postSignatureRequestsSignatureRequestIdMetadata'])->name('metadata.post.signature.requests.signature.request.id.metadata');

/**
 * PUT putSignatureRequestsSignatureRequestIdMetadata
 * Summary: Update Metadata of a Signature Request
 * Notes: Updates the Metadata of a given Signature Request. Any parameters not provided are left unchanged.
 */
Route::PUT('/v3/signature_requests/{signatureRequestId}/metadata', [\OpenAPI\Server\Http\Controllers\MetadataController::class, 'putSignatureRequestsSignatureRequestIdMetadata'])->name('metadata.put.signature.requests.signature.request.id.metadata');

/**
 * GET getVerificationsProofsOfAddress
 * Summary: List Proof of Address Verifications
 * Notes: Returns the list of all Proof of Address Verifications within your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
 */
Route::GET('/v3/verifications/proofs_of_address', [\OpenAPI\Server\Http\Controllers\ProofOfAddressVerificationController::class, 'getVerificationsProofsOfAddress'])->name('proofOfAddressVerification.get.verifications.proofs.of.address');

/**
 * GET getVerificationsProofsOfAddressId
 * Summary: Retrieve a Proof of Address Verification
 * Notes: Get the detailed results of a Proof of Address Verification.
 */
Route::GET('/v3/verifications/proofs_of_address/{proofOfAddressVerificationId}', [\OpenAPI\Server\Http\Controllers\ProofOfAddressVerificationController::class, 'getVerificationsProofsOfAddressId'])->name('proofOfAddressVerification.get.verifications.proofs.of.address.id');

/**
 * POST postVerificationsProofsOfAddress
 * Summary: Initiate a new Proof of Address Verification
 * Notes: Ask for a Proof of Address Verification by sending a supported document type (see our guide for more info).
 */
Route::POST('/v3/verifications/proofs_of_address', [\OpenAPI\Server\Http\Controllers\ProofOfAddressVerificationController::class, 'postVerificationsProofsOfAddress'])->name('proofOfAddressVerification.post.verifications.proofs.of.address');

/**
 * DELETE deleteSignatureRequestsSignatureRequestId
 * Summary: Delete a Signature Request
 * Notes: Deletes a given Signature Request, not possible if the Signature Request is in &#x60;approval&#x60; and &#x60;ongoing&#x60; status.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}', [\OpenAPI\Server\Http\Controllers\SignatureRequestController::class, 'deleteSignatureRequestsSignatureRequestId'])->name('signatureRequest.delete.signature.requests.signature.request.id');

/**
 * GET getSignatureRequests
 * Summary: List Signature Requests
 * Notes: Returns the list of all Signatures Requests in your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
 */
Route::GET('/v3/signature_requests', [\OpenAPI\Server\Http\Controllers\SignatureRequestController::class, 'getSignatureRequests'])->name('signatureRequest.get.signature.requests');

/**
 * GET getSignatureRequestsSignatureRequestId
 * Summary: Fetch a Signature Request
 * Notes: Retrieves a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}', [\OpenAPI\Server\Http\Controllers\SignatureRequestController::class, 'getSignatureRequestsSignatureRequestId'])->name('signatureRequest.get.signature.requests.signature.request.id');

/**
 * PATCH patchSignatureRequestsSignatureRequestId
 * Summary: Update a Signature Request
 * Notes: Updates a given Signature Request. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/signature_requests/{signatureRequestId}', [\OpenAPI\Server\Http\Controllers\SignatureRequestController::class, 'patchSignatureRequestsSignatureRequestId'])->name('signatureRequest.patch.signature.requests.signature.request.id');

/**
 * POST postSignatureRequests
 * Summary: Initiate a new Signature Request
 * Notes: Creates a new Signature Request resource.
 */
Route::POST('/v3/signature_requests', [\OpenAPI\Server\Http\Controllers\SignatureRequestController::class, 'postSignatureRequests'])->name('signatureRequest.post.signature.requests');

/**
 * POST postSignatureRequestsSignatureRequestIdActivate
 * Summary: Activate a Signature Request
 * Notes: Activates a Signature request, so it is not in &#x60;draft&#x60; status anymore. If the &#x60;delivery_mode&#x60; is not &#x60;null&#x60;, activating the Signature Request will trigger the notifications to Approvers/Followers/Signers.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/activate', [\OpenAPI\Server\Http\Controllers\SignatureRequestController::class, 'postSignatureRequestsSignatureRequestIdActivate'])->name('signatureRequest.post.signature.requests.signature.request.id.activate');

/**
 * POST postSignatureRequestsSignatureRequestIdCancel
 * Summary: Cancel a Signature Request
 * Notes: Cancels a Signature Request when it is in &#x60;approval&#x60; or &#x60;ongoing&#x60; status. A canceled Signature Request cannot be reactivated.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/cancel', [\OpenAPI\Server\Http\Controllers\SignatureRequestController::class, 'postSignatureRequestsSignatureRequestIdCancel'])->name('signatureRequest.post.signature.requests.signature.request.id.cancel');

/**
 * POST postSignatureRequestsSignatureRequestIdReactivate
 * Summary: Reactivate an expired Signature Request
 * Notes: Reactivates a Signature Request when it is in &#x60;expired&#x60; status.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/reactivate', [\OpenAPI\Server\Http\Controllers\SignatureRequestController::class, 'postSignatureRequestsSignatureRequestIdReactivate'])->name('signatureRequest.post.signature.requests.signature.request.id.reactivate');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdSignersSignerId
 * Summary: Delete a Signer
 * Notes: Deletes a given Signer from a Signature Request.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/signers/{signerId}', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'deleteSignatureRequestsSignatureRequestIdSignersSignerId'])->name('signer.delete.signature.requests.signature.request.id.signers.signer.id');

/**
 * GET getSignatureRequestsSignatureRequestIdSigners
 * Summary: List Signature Request&#39;s Signers
 * Notes: Returns a list of Signers for a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/signers', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'getSignatureRequestsSignatureRequestIdSigners'])->name('signer.get.signature.requests.signature.request.id.signers');

/**
 * GET getSignersSignersId
 * Summary: Get a Signer
 * Notes: Retrieves a given Signer.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/signers/{signerId}', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'getSignersSignersId'])->name('signer.get.signers.signers.id');

/**
 * PATCH patchSignatureRequestsSignatureRequestIdSignersSignerId
 * Summary: Update a Signer
 * Notes: Updates a given Signer. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/signature_requests/{signatureRequestId}/signers/{signerId}', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'patchSignatureRequestsSignatureRequestIdSignersSignerId'])->name('signer.patch.signature.requests.signature.request.id.signers.signer.id');

/**
 * POST postSignatureRequestsIdSignersIdIdentityVerification
 * Summary: Pre-verify an identity document
 * Notes: Verifying an identity document for a Signer to know if their document is valid before enabling them to sign using Advanced Electronic Signature.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/identity_verification', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'postSignatureRequestsIdSignersIdIdentityVerification'])->name('signer.post.signature.requests.id.signers.id.identity.verification');

/**
 * POST postSignatureRequestsIdSignersIdUnblockIdentification
 * Summary: Unblock Signer after an identity mismatch
 * Notes: Unblock a Signer during a Qualified Electronic Signature in cases where a mismatch was previously detected between the sender-provided first and/or last name and the information on the Signer&#39;s ID document.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/unblock_identification', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'postSignatureRequestsIdSignersIdUnblockIdentification'])->name('signer.post.signature.requests.id.signers.id.unblock.identification');

/**
 * POST postSignatureRequestsSignatureRequestIdSigners
 * Summary: Create a new Signer
 * Notes: Adds a Signer to a given Signature Request.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/signers', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'postSignatureRequestsSignatureRequestIdSigners'])->name('signer.post.signature.requests.signature.request.id.signers');

/**
 * POST postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp
 * Summary: Send a One-Time Password (OTP) to a Signer
 * Notes: Send a One-Time Password (OTP) to a given Signer. Use this endpoint only if you use your own signing flow.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/send_otp', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'postSignatureRequestsSignatureRequestIdSignersSignerIdSendOtp'])->name('signer.post.signature.requests.signature.request.id.signers.signer.id.send.otp');

/**
 * POST postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder
 * Summary: Send manual reminder to a Signer
 * Notes: Sends a reminder to a given signer to complete their Signature Request. Only possible when the Signature Request status is &#x60;ongoing&#x60; and the Signer status is &#x60;notified&#x60;.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/send_reminder', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder'])->name('signer.post.signature.requests.signature.request.id.signers.signer.id.send.reminder');

/**
 * POST postSignatureRequestsSignatureRequestIdSignersSignerIdSign
 * Summary: Sign a Signature Request
 * Notes: Sign a Signature Request on behalf of a given Signer.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/sign', [\OpenAPI\Server\Http\Controllers\SignerController::class, 'postSignatureRequestsSignatureRequestIdSignersSignerIdSign'])->name('signer.post.signature.requests.signature.request.id.signers.signer.id.sign');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdConsentRequestsConsentRequestId
 * Summary: Delete a Signer Consent Request
 * Notes: Delete a Signer Consent Request from signature request. This action is only permitted when the Signature Request is a draft.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/consent_requests/{consentRequestId}', [\OpenAPI\Server\Http\Controllers\SignerConsentRequestController::class, 'deleteSignatureRequestsSignatureRequestIdConsentRequestsConsentRequestId'])->name('signerConsentRequest.delete.signature.requests.signature.request.id.consent.requests.consent.request.id');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdConsentRequestsConsentRequestIdSignersSignerId
 * Summary: Remove a Signer from a given Signer Consent Request
 * Notes: Remove a Signer from a given Signer Consent Request. This action is only permitted when the Signature Request is a draft.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/consent_requests/{consentRequestId}/signers/{signerId}', [\OpenAPI\Server\Http\Controllers\SignerConsentRequestController::class, 'deleteSignatureRequestsSignatureRequestIdConsentRequestsConsentRequestIdSignersSignerId'])->name('signerConsentRequest.delete.signature.requests.signature.request.id.consent.requests.consent.request.id.signers.signer.id');

/**
 * GET getSignatureRequestsSignatureRequestIdSignerConsentRequests
 * Summary: List Signer Consent Requests of the Signature Request
 * Notes: Returns a list of Signer Consent Requests for a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/consent_requests', [\OpenAPI\Server\Http\Controllers\SignerConsentRequestController::class, 'getSignatureRequestsSignatureRequestIdSignerConsentRequests'])->name('signerConsentRequest.get.signature.requests.signature.request.id.signer.consent.requests');

/**
 * PATCH patchSignatureRequestsSignatureRequestIdConsentRequestsConsentRequestId
 * Summary: Update a Signer Consent Request
 * Notes: Updates a given Signer Consent Request. Any parameters not provided are left unchanged. This action is only permitted when the Signature Request is a draft.
 */
Route::PATCH('/v3/signature_requests/{signatureRequestId}/consent_requests/{consentRequestId}', [\OpenAPI\Server\Http\Controllers\SignerConsentRequestController::class, 'patchSignatureRequestsSignatureRequestIdConsentRequestsConsentRequestId'])->name('signerConsentRequest.patch.signature.requests.signature.request.id.consent.requests.consent.request.id');

/**
 * POST postSignatureRequestsSignatureRequestIdConsentRequests
 * Summary: Add Signer Consent Request to a Signature Request
 * Notes: Adds a Signer Consent Request to a given Signature Request. This action is only permitted when the Signature Request is a draft.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/consent_requests', [\OpenAPI\Server\Http\Controllers\SignerConsentRequestController::class, 'postSignatureRequestsSignatureRequestIdConsentRequests'])->name('signerConsentRequest.post.signature.requests.signature.request.id.consent.requests');

/**
 * PUT putSignatureRequestsSignatureRequestIdConsentRequestsConsentRequestIdSignersSignerId
 * Summary: Adds a Signer to a given Signer Consent Request
 * Notes: Adds a Signer to a given Signer Consent Request. This action is only permitted when the Signature Request is a draft.
 */
Route::PUT('/v3/signature_requests/{signatureRequestId}/consent_requests/{consentRequestId}/signers/{signerId}', [\OpenAPI\Server\Http\Controllers\SignerConsentRequestController::class, 'putSignatureRequestsSignatureRequestIdConsentRequestsConsentRequestIdSignersSignerId'])->name('signerConsentRequest.put.signature.requests.signature.request.id.consent.requests.consent.request.id.signers.signer.id');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdDocumentRequestsDocumentRequestId
 * Summary: Delete a Signer Document Request
 * Notes: Delete a Signer Document Request from signature request. This action is only permitted when the Signature Request is a draft.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/document_requests/{documentRequestId}', [\OpenAPI\Server\Http\Controllers\SignerDocumentRequestController::class, 'deleteSignatureRequestsSignatureRequestIdDocumentRequestsDocumentRequestId'])->name('signerDocumentRequest.delete.signature.requests.signature.request.id.document.requests.document.request.id');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdDocumentRequestsDocumentRequestIdSignersSignerId
 * Summary: Remove a Signer to a given Signer Document Request
 * Notes: Remove a Signer to a given Signer Document Request. This action is only permitted when the Signature Request is a draft.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/document_requests/{documentRequestId}/signers/{signerId}', [\OpenAPI\Server\Http\Controllers\SignerDocumentRequestController::class, 'deleteSignatureRequestsSignatureRequestIdDocumentRequestsDocumentRequestIdSignersSignerId'])->name('signerDocumentRequest.delete.signature.requests.signature.request.id.document.requests.document.request.id.signers.signer.id');

/**
 * DELETE deleteSignatureRequestsSignatureRequestIdSignersSignerIdDocuments
 * Summary: Delete the Documents uploaded by a Signer
 * Notes: Deletes all documents uploaded by a given Signer for a specific Signature Request. Deletion is only possible when Signer status is &#x60;signed&#x60;.
 */
Route::DELETE('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/documents', [\OpenAPI\Server\Http\Controllers\SignerDocumentRequestController::class, 'deleteSignatureRequestsSignatureRequestIdSignersSignerIdDocuments'])->name('signerDocumentRequest.delete.signature.requests.signature.request.id.signers.signer.id.documents');

/**
 * GET getSignatureRequestsSignatureRequestIdSignerDocumentRequests
 * Summary: List Signer Document Requests of the Signature Request
 * Notes: Returns a list of Signer Document Requests for a given Signature Request.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/document_requests', [\OpenAPI\Server\Http\Controllers\SignerDocumentRequestController::class, 'getSignatureRequestsSignatureRequestIdSignerDocumentRequests'])->name('signerDocumentRequest.get.signature.requests.signature.request.id.signer.document.requests');

/**
 * GET getSignatureRequestsSignatureRequestIdSignersSignerIdDocuments
 * Summary: List the Signer Documents of a Signer
 * Notes: Returns a list of Documents uploaded by a given Signer. Only possible when Signer status is &#x60;signed&#x60;.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/documents', [\OpenAPI\Server\Http\Controllers\SignerDocumentRequestController::class, 'getSignatureRequestsSignatureRequestIdSignersSignerIdDocuments'])->name('signerDocumentRequest.get.signature.requests.signature.request.id.signers.signer.id.documents');

/**
 * GET getSignatureRequestsSignatureRequestIdSignersSignerIdDocumentsSignerDocumentId
 * Summary: Download a Signer Document
 * Notes: Downloads a Document uploaded by a given Signer. Only possible when Signer status is &#x60;signed&#x60;.
 */
Route::GET('/v3/signature_requests/{signatureRequestId}/signers/{signerId}/documents/{signerDocumentId}/download', [\OpenAPI\Server\Http\Controllers\SignerDocumentRequestController::class, 'getSignatureRequestsSignatureRequestIdSignersSignerIdDocumentsSignerDocumentId'])->name('signerDocumentRequest.get.signature.requests.signature.request.id.signers.signer.id.documents.signer.document.id');

/**
 * POST postSignatureRequestsSignatureRequestIdDocumentRequests
 * Summary: Add Signer Document Request to a Signature Request
 * Notes: Adds a Signer Document Request to a given Signature Request.
 */
Route::POST('/v3/signature_requests/{signatureRequestId}/document_requests', [\OpenAPI\Server\Http\Controllers\SignerDocumentRequestController::class, 'postSignatureRequestsSignatureRequestIdDocumentRequests'])->name('signerDocumentRequest.post.signature.requests.signature.request.id.document.requests');

/**
 * PUT putSignatureRequestsSignatureRequestIdDocumentRequestsDocumentRequestIdSignersSignerId
 * Summary: Adds a Signer to a given Signer Document Request
 * Notes: Adds a Signer to a given Signer Document Request. This action is only permitted when the Signature Request is a draft.
 */
Route::PUT('/v3/signature_requests/{signatureRequestId}/document_requests/{documentRequestId}/signers/{signerId}', [\OpenAPI\Server\Http\Controllers\SignerDocumentRequestController::class, 'putSignatureRequestsSignatureRequestIdDocumentRequestsDocumentRequestIdSignersSignerId'])->name('signerDocumentRequest.put.signature.requests.signature.request.id.document.requests.document.request.id.signers.signer.id');

/**
 * GET getTemplates
 * Summary: List Templates
 * Notes: Returns the list of all Templates within your Organization.
 */
Route::GET('/v3/templates', [\OpenAPI\Server\Http\Controllers\TemplateController::class, 'getTemplates'])->name('template.get.templates');

/**
 * DELETE deleteUsersUserId
 * Summary: Delete a User
 * Notes: Deletes a given User and its Invitation, only possible when the User is in &#x60;invited&#x60; status.
 */
Route::DELETE('/v3/users/{userId}', [\OpenAPI\Server\Http\Controllers\UserController::class, 'deleteUsersUserId'])->name('user.delete.users.user.id');

/**
 * DELETE deleteWorkspaceWorkspaceIdUsersUserId
 * Summary: Remove a user from a workspace
 * Notes: Removes a User from a given Workspace.
 */
Route::DELETE('/v3/workspaces/{workspaceId}/users/{userId}', [\OpenAPI\Server\Http\Controllers\UserController::class, 'deleteWorkspaceWorkspaceIdUsersUserId'])->name('user.delete.workspace.workspace.id.users.user.id');

/**
 * GET getUsers
 * Summary: List Users
 * Notes: Returns the list of all the Users within your Organization.
 */
Route::GET('/v3/users', [\OpenAPI\Server\Http\Controllers\UserController::class, 'getUsers'])->name('user.get.users');

/**
 * GET getUsersUserId
 * Summary: Get a User
 * Notes: Retrieves a given User within your Organization.
 */
Route::GET('/v3/users/{userId}', [\OpenAPI\Server\Http\Controllers\UserController::class, 'getUsersUserId'])->name('user.get.users.user.id');

/**
 * PATCH patchUsersUserId
 * Summary: Update a User
 * Notes: Updates a given User. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/users/{userId}', [\OpenAPI\Server\Http\Controllers\UserController::class, 'patchUsersUserId'])->name('user.patch.users.user.id');

/**
 * POST postUsers
 * Summary: Create a new User
 * Notes: Creates a new application User and sends them an invitation email.
 */
Route::POST('/v3/users', [\OpenAPI\Server\Http\Controllers\UserController::class, 'postUsers'])->name('user.post.users');

/**
 * PUT putWorkspacesWorkspaceIdUsers
 * Summary: Associate a user to a workspace
 * Notes: Associates a User with a given Workspace.
 */
Route::PUT('/v3/workspaces/{workspaceId}/users/{userId}', [\OpenAPI\Server\Http\Controllers\UserController::class, 'putWorkspacesWorkspaceIdUsers'])->name('user.put.workspaces.workspace.id.users');

/**
 * GET getInvitations
 * Summary: List User Invitations
 * Notes: Returns the list of all the Users Invitations within your Organization.
 */
Route::GET('/v3/users/invitations', [\OpenAPI\Server\Http\Controllers\UserInvitationController::class, 'getInvitations'])->name('userInvitation.get.invitations');

/**
 * GET getUsersInvitationInvitationId
 * Summary: Get an Invitation
 * Notes: Retrieves a given User Invitation.
 */
Route::GET('/v3/users/invitations/{invitationId}', [\OpenAPI\Server\Http\Controllers\UserInvitationController::class, 'getUsersInvitationInvitationId'])->name('userInvitation.get.users.invitation.invitation.id');

/**
 * GET getUsersUserIdInvitation
 * Summary: Get a User Invitation via the User
 * Notes: Retrieves the Invitation of a given User. The Invitation only exists when the User is in &#x60;invited&#x60; status.
 */
Route::GET('/v3/users/{userId}/invitation', [\OpenAPI\Server\Http\Controllers\UserInvitationController::class, 'getUsersUserIdInvitation'])->name('userInvitation.get.users.user.id.invitation');

/**
 * GET getVerificationsWatchlists
 * Summary: List Watchlist Verifications
 * Notes: Returns the list of all Watchlist Verifications within your organization.  You can limit the number of items returned by using filters and pagination.  Consult our guide for more details and examples.
 */
Route::GET('/v3/verifications/watchlists', [\OpenAPI\Server\Http\Controllers\WatchlistVerificationController::class, 'getVerificationsWatchlists'])->name('watchlistVerification.get.verifications.watchlists');

/**
 * GET getVerificationsWatchlistsId
 * Summary: Retrieve a Watchlist Verification
 * Notes: Retrieve a specific Watchlist Verification by its ID. Returns details about sanctions and politically exposed person status.
 */
Route::GET('/v3/verifications/watchlists/{watchlistVerificationId}', [\OpenAPI\Server\Http\Controllers\WatchlistVerificationController::class, 'getVerificationsWatchlistsId'])->name('watchlistVerification.get.verifications.watchlists.id');

/**
 * POST postVerificationsWatchlists
 * Summary: Initiate a Watchlist Verification
 * Notes: Initiate a verification to check if a person appears on international sanctions lists or as a politically exposed person (PEP).
 */
Route::POST('/v3/verifications/watchlists', [\OpenAPI\Server\Http\Controllers\WatchlistVerificationController::class, 'postVerificationsWatchlists'])->name('watchlistVerification.post.verifications.watchlists');

/**
 * DELETE deleteWebhooksWebhookId
 * Summary: Delete a Webhook subscription
 * Notes: Deletes a given Webhook subscription.
 */
Route::DELETE('/v3/webhooks/{webhookId}', [\OpenAPI\Server\Http\Controllers\WebhookController::class, 'deleteWebhooksWebhookId'])->name('webhook.delete.webhooks.webhook.id');

/**
 * GET getWebhooks
 * Summary: List Webhook subscriptions
 * Notes: Returns the list of all Webhook subscriptions in your Organization.
 */
Route::GET('/v3/webhooks', [\OpenAPI\Server\Http\Controllers\WebhookController::class, 'getWebhooks'])->name('webhook.get.webhooks');

/**
 * GET getWebhooksWebhookId
 * Summary: Get a Webhook subscription
 * Notes: Retrieves a given Webhook subscription.
 */
Route::GET('/v3/webhooks/{webhookId}', [\OpenAPI\Server\Http\Controllers\WebhookController::class, 'getWebhooksWebhookId'])->name('webhook.get.webhooks.webhook.id');

/**
 * PATCH patchWebhooksWebhookId
 * Summary: Update a Webhook subscription
 * Notes: Updates a given Webhook subscription. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/webhooks/{webhookId}', [\OpenAPI\Server\Http\Controllers\WebhookController::class, 'patchWebhooksWebhookId'])->name('webhook.patch.webhooks.webhook.id');

/**
 * POST postWebhooksSubscriptions
 * Summary: Create a Webhook subscription
 * Notes: Creates a new Webhook subscription in your organization.
 */
Route::POST('/v3/webhooks', [\OpenAPI\Server\Http\Controllers\WebhookController::class, 'postWebhooksSubscriptions'])->name('webhook.post.webhooks.subscriptions');

/**
 * DELETE deleteWorkspace
 * Summary: Delete a Workspace
 * Notes: Deletes a given Workspace and transfers everything that is attached to this Workspace to a another specified Workspace.
 */
Route::DELETE('/v3/workspaces/{workspaceId}', [\OpenAPI\Server\Http\Controllers\WorkspaceController::class, 'deleteWorkspace'])->name('workspace.delete.workspace');

/**
 * GET getWorkspaces
 * Summary: List Workspaces
 * Notes: Returns the list of all Workspaces within your Organization.
 */
Route::GET('/v3/workspaces', [\OpenAPI\Server\Http\Controllers\WorkspaceController::class, 'getWorkspaces'])->name('workspace.get.workspaces');

/**
 * GET getWorkspacesDefault
 * Summary: Get the default Workspace
 * Notes: Retrieves the default Workspace.
 */
Route::GET('/v3/workspaces/default', [\OpenAPI\Server\Http\Controllers\WorkspaceController::class, 'getWorkspacesDefault'])->name('workspace.get.workspaces.default');

/**
 * GET getWorkspacesWorkspaceId
 * Summary: Get a Workspace
 * Notes: Retrieves a given Workspace.
 */
Route::GET('/v3/workspaces/{workspaceId}', [\OpenAPI\Server\Http\Controllers\WorkspaceController::class, 'getWorkspacesWorkspaceId'])->name('workspace.get.workspaces.workspace.id');

/**
 * POST markWorkspaceAsDefault
 * Summary: Mark the given Workspace as default
 * Notes: Marks the given Workspace as default.
 */
Route::POST('/v3/workspaces/default', [\OpenAPI\Server\Http\Controllers\WorkspaceController::class, 'markWorkspaceAsDefault'])->name('workspace.mark.workspace.as.default');

/**
 * PATCH patchWorkspacesWorkspaceId
 * Summary: Update a Workspace
 * Notes: Updates a given Workspace. Any parameters not provided are left unchanged.
 */
Route::PATCH('/v3/workspaces/{workspaceId}', [\OpenAPI\Server\Http\Controllers\WorkspaceController::class, 'patchWorkspacesWorkspaceId'])->name('workspace.patch.workspaces.workspace.id');

/**
 * POST postWorkspace
 * Summary: Create a Workspace
 * Notes: Creates a new Workspace in the organization.
 */
Route::POST('/v3/workspaces', [\OpenAPI\Server\Http\Controllers\WorkspaceController::class, 'postWorkspace'])->name('workspace.post.workspace');

